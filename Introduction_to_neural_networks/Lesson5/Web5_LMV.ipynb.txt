{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vQnDWSn8TEOl"
   },
   "source": [
    "# Введение в искусственные нейронные сети\n",
    "# Урок 5. Рекуррентные нейронные сети"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RDl63Y-8TEOq"
   },
   "source": [
    "## Содержание методического пособия:\n",
    "\n",
    "\n",
    "<ol>\n",
    "<li>Что такое Рекурретные нейронные сети</li>\n",
    "<li>Архитектура Рекуррентных нейронных сетей</li>\n",
    "<li>Пример на Keras рекуррентной нейронной сети</li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hUDRJOqcTEOs"
   },
   "source": [
    "## Что такое Рекуррентные нейронные сети\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0ZwtSK7zTEOu"
   },
   "source": [
    "Нейронные сети которые мы разбирали ранее относятся к классу feed forward нейронных сетей или сетей прямого распространения. Выходной сигнал слоя в этих нейронных сетях передавался напрямую в следующий слой. Однако есть задачи, в которых нам нужно обучать нейронную сеть не на единичных экземплярах наподобие изображений, а на наборах последовательностей, например последовательностей слов. \n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1f_uoDbYksc0JQ_zc7VAPFT5P0NsQ2607'>\n",
    "\n",
    "В рекуррентной нейронной сети выходной сигнал внутренних слоев циркулирует в этих слоях некоторое время. При обучении такой нейронной сети прежние выходные сигналы используются как дополнительные input'ы. Можно сказать, что эти дополнительные input'ы конкатенируются с \"нормальными\" input'ами предыдущего слоя.\n",
    "\n",
    "Плюс рекуррентных нейронных сетей, или RNN, в том, что они обеспечивают последовательности с вариативными длинами как для входа, так и для вывода. Вот несколько примеров того, как может выглядеть рекуррентная нейронная сеть:\n",
    "\n",
    "<img src='https://python-scripts.com/wp-content/uploads/2019/10/rrn-001.jpg'>\n",
    "\n",
    "*Входные данные отмечены красным, нейронная сеть RNN — зеленым, а вывод — синим.*\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lSuRcwvWn2JN"
   },
   "source": [
    "И несколько примеров задач:\n",
    "<img src='https://drive.google.com/uc?export=view&id=1QlyXHu0OjSolwLfVeF3DmPFuwOYVa3QE'>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2NHvb2SRTEO0"
   },
   "source": [
    "Реккурентные нейронные сети используются например для того, чтобы научить компьютерные системы \"понимать\" человеческих язык, для генерации текста.\n",
    "Области использования:\n",
    "\n",
    "- *Машинный перевод* выполняется при помощи нейронных сетей с принципом «многие ко многим». Оригинальная последовательность текста подается в рекуррентную нейронную сеть, которая затем создает переведенный текст в качестве результата вывода\n",
    "- *Анализ настроений* часто выполняется при помощи рекуррентных нейронных сетей с принципом «многие к одному». Этот отзыв положительный или отрицательный?\n",
    "- Разновидности реккуретных нейронных используются также для построения ИИ, подобных тем, что *обыграли человека* в компьютерную игру Dota 2\n",
    "\n",
    "В отличие от сверточных нейронных сетей реккурентные нейронные сети как правило содержат небольшое количество слоев"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vWKxQzctTEO2"
   },
   "source": [
    "## Архитектура Рекуррентных нейронных сетей\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UpqSEDLdTEO4"
   },
   "source": [
    "Несмотря на то, что RNN могут хорошо справляться со своими задачами они не могут работать с длинными последовательностями. Эффективно они могут работать только с последовательностями состоящими из 3-4 элементов. Для, к примеру, анализа текста отзывов на предмет того положительный это отзыв или нет этого будет недостаточно. Здесь может понадобиться анализ нескольких десятков слов, чтобы сделать корректный вывод."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lcFx75tROHcI"
   },
   "source": [
    "<img src='https://drive.google.com/uc?export=view&id=1NCfOdVRM6A1oWLxljFQVb3ldFtuoOZP8'>\n",
    "\n",
    "Типичная классическая рекуррентная нейронная сеть использует только три набора параметров веса для выполнения требуемых подсчетов:\n",
    "\n",
    "1. $W_{xh}$ используется для всех связок $x_t$ → $h_t$\n",
    "2. $W_{hh}$ используется для всех связок $h_{t-1}$ → $h_t$\n",
    "3. $W_{hy}$ используется для всех связок $h_t$ → $y_t$\n",
    "\n",
    "$$h_t = tanh(W_{xh}x_t + W_{hh}h_{t-1})$$\n",
    "$$y_t = W_{hy}h_t$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1S-HasHybd6a"
   },
   "source": [
    "<img src='https://drive.google.com/uc?export=view&id=1xbiwTUJC4kS5yiwgG7mcvdR282IgmnZu' width=500>\n",
    "\n",
    "До этого в одном нейроне функция активации была:\n",
    "\n",
    "$$h = tanh(Wx)$$\n",
    "А теперь в нейроне с обратной связью:\n",
    "$$h = tanh(W_{1}h + W_{2}x)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fxl249ihhWkt"
   },
   "source": [
    "Вот так можно проиллюстрировать связи в нейронах RNN: <img src='https://drive.google.com/uc?export=view&id=14OzceTvk2h6d4JAS7OUvxOuALEwzlTNf' width=500>\n",
    "\n",
    "Выход каждого нейрона подключен ко входам всех нейронов.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "PmN2uhM6HyGQ"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-02-06 16:36:52.366218: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "from keras.layers import SimpleRNN, LSTM, SimpleRNNCell\n",
    "from keras.models import Sequential\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cv_xw5cRJI0Q",
    "outputId": "b4c38be2-186c-48f2-a681-57e885efc906"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " simple_rnn (SimpleRNN)      (None, 3)                 15        \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 15\n",
      "Trainable params: 15\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-02-06 16:36:58.795302: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "tf.random.set_seed(8)\n",
    "\n",
    "model = Sequential([\n",
    "            SimpleRNN(3, activation='sigmoid',  # количество скрытых состояний\n",
    "                      return_sequences=False,  # доступ к выходу скрытого состояния для каждого шага времени ввода\n",
    "                      input_shape=(10, 1))\n",
    "        ])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rNXgOUtbiMFs",
    "outputId": "e5af129b-c094-4150-b7db-64ddb72f0db7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([[ 0.10408556, -0.11998415,  0.7602755 ]], dtype=float32),\n",
       " array([[ 0.17983365,  0.35389706,  0.9178325 ],\n",
       "        [ 0.96533245,  0.11595899, -0.23385191],\n",
       "        [-0.18919045,  0.92806804, -0.32077503]], dtype=float32),\n",
       " array([0., 0., 0.], dtype=float32)]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.get_weights()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "cNFj5gtZHnpG"
   },
   "outputs": [],
   "source": [
    "# 0.6918393"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Zp3pityDdtGE",
    "outputId": "64196d00-4e34-4794-ff61-58e6cecfdc40"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 210ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.6499788 , 0.71553266, 0.5026591 ]], dtype=float32)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.random.seed(5)\n",
    "x = np.random.randn(10).reshape((10, 1))\n",
    "model.predict(x[None])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "s1QjamHTdfWd"
   },
   "source": [
    "### Реализация рекуррентной сети"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tWQ-8jvpQdF-"
   },
   "source": [
    "Давайте попробуем сделать простую реккурентную нейронную сеть, которая будет учиться складывать числа. Для этих целей мы не будем пользоваться фреймворками для Deep Learning, чтобы посмотреть как она работает внутри.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "ZdKvK1doQo9V"
   },
   "outputs": [],
   "source": [
    "# впервую очередь подключим numpy и библиотеку copy, которая понадобиться, чтобы сделать deepcopy ряда элементов\n",
    "import copy\n",
    "import numpy as np\n",
    "np.random.seed(0)\n",
    "\n",
    "\n",
    "# вычислим сигмоиду\n",
    "def sigmoid(x):\n",
    "    output = 1 / (1 + np.exp(-x))\n",
    "    return output\n",
    "\n",
    "# конвертируем значение функции сигмоиды в ее производную. \n",
    "def sigmoid_deriv(output):\n",
    "    return output * (1 - output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "B1GjZCvTa6eW",
    "outputId": "326edb2f-d18b-4785-bdec-cb62bea3b172"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, ..., 0, 0, 0],\n",
       "       [0, 0, 0, ..., 0, 0, 1],\n",
       "       [0, 0, 0, ..., 0, 1, 0],\n",
       "       ...,\n",
       "       [1, 1, 1, ..., 1, 0, 1],\n",
       "       [1, 1, 1, ..., 1, 1, 0],\n",
       "       [1, 1, 1, ..., 1, 1, 1]], dtype=uint8)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{0: array([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 1: array([0, 0, 0, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 2: array([0, 0, 0, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 3: array([0, 0, 0, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 4: array([0, 0, 0, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 5: array([0, 0, 0, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 6: array([0, 0, 0, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 7: array([0, 0, 0, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 8: array([0, 0, 0, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 9: array([0, 0, 0, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 10: array([0, 0, 0, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 11: array([0, 0, 0, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 12: array([0, 0, 0, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 13: array([0, 0, 0, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 14: array([0, 0, 0, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 15: array([0, 0, 0, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 16: array([0, 0, 0, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 17: array([0, 0, 0, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 18: array([0, 0, 0, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 19: array([0, 0, 0, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 20: array([0, 0, 0, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 21: array([0, 0, 0, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 22: array([0, 0, 0, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 23: array([0, 0, 0, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 24: array([0, 0, 0, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 25: array([0, 0, 0, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 26: array([0, 0, 0, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 27: array([0, 0, 0, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 28: array([0, 0, 0, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 29: array([0, 0, 0, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 30: array([0, 0, 0, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 31: array([0, 0, 0, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 32: array([0, 0, 1, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 33: array([0, 0, 1, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 34: array([0, 0, 1, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 35: array([0, 0, 1, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 36: array([0, 0, 1, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 37: array([0, 0, 1, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 38: array([0, 0, 1, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 39: array([0, 0, 1, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 40: array([0, 0, 1, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 41: array([0, 0, 1, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 42: array([0, 0, 1, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 43: array([0, 0, 1, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 44: array([0, 0, 1, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 45: array([0, 0, 1, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 46: array([0, 0, 1, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 47: array([0, 0, 1, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 48: array([0, 0, 1, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 49: array([0, 0, 1, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 50: array([0, 0, 1, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 51: array([0, 0, 1, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 52: array([0, 0, 1, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 53: array([0, 0, 1, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 54: array([0, 0, 1, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 55: array([0, 0, 1, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 56: array([0, 0, 1, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 57: array([0, 0, 1, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 58: array([0, 0, 1, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 59: array([0, 0, 1, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 60: array([0, 0, 1, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 61: array([0, 0, 1, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 62: array([0, 0, 1, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 63: array([0, 0, 1, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 64: array([0, 1, 0, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 65: array([0, 1, 0, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 66: array([0, 1, 0, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 67: array([0, 1, 0, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 68: array([0, 1, 0, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 69: array([0, 1, 0, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 70: array([0, 1, 0, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 71: array([0, 1, 0, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 72: array([0, 1, 0, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 73: array([0, 1, 0, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 74: array([0, 1, 0, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 75: array([0, 1, 0, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 76: array([0, 1, 0, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 77: array([0, 1, 0, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 78: array([0, 1, 0, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 79: array([0, 1, 0, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 80: array([0, 1, 0, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 81: array([0, 1, 0, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 82: array([0, 1, 0, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 83: array([0, 1, 0, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 84: array([0, 1, 0, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 85: array([0, 1, 0, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 86: array([0, 1, 0, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 87: array([0, 1, 0, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 88: array([0, 1, 0, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 89: array([0, 1, 0, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 90: array([0, 1, 0, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 91: array([0, 1, 0, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 92: array([0, 1, 0, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 93: array([0, 1, 0, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 94: array([0, 1, 0, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 95: array([0, 1, 0, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 96: array([0, 1, 1, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 97: array([0, 1, 1, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 98: array([0, 1, 1, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 99: array([0, 1, 1, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 100: array([0, 1, 1, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 101: array([0, 1, 1, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 102: array([0, 1, 1, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 103: array([0, 1, 1, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 104: array([0, 1, 1, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 105: array([0, 1, 1, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 106: array([0, 1, 1, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 107: array([0, 1, 1, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 108: array([0, 1, 1, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 109: array([0, 1, 1, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 110: array([0, 1, 1, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 111: array([0, 1, 1, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 112: array([0, 1, 1, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 113: array([0, 1, 1, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 114: array([0, 1, 1, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 115: array([0, 1, 1, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 116: array([0, 1, 1, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 117: array([0, 1, 1, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 118: array([0, 1, 1, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 119: array([0, 1, 1, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 120: array([0, 1, 1, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 121: array([0, 1, 1, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 122: array([0, 1, 1, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 123: array([0, 1, 1, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 124: array([0, 1, 1, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 125: array([0, 1, 1, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 126: array([0, 1, 1, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 127: array([0, 1, 1, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 128: array([1, 0, 0, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 129: array([1, 0, 0, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 130: array([1, 0, 0, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 131: array([1, 0, 0, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 132: array([1, 0, 0, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 133: array([1, 0, 0, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 134: array([1, 0, 0, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 135: array([1, 0, 0, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 136: array([1, 0, 0, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 137: array([1, 0, 0, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 138: array([1, 0, 0, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 139: array([1, 0, 0, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 140: array([1, 0, 0, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 141: array([1, 0, 0, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 142: array([1, 0, 0, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 143: array([1, 0, 0, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 144: array([1, 0, 0, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 145: array([1, 0, 0, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 146: array([1, 0, 0, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 147: array([1, 0, 0, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 148: array([1, 0, 0, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 149: array([1, 0, 0, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 150: array([1, 0, 0, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 151: array([1, 0, 0, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 152: array([1, 0, 0, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 153: array([1, 0, 0, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 154: array([1, 0, 0, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 155: array([1, 0, 0, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 156: array([1, 0, 0, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 157: array([1, 0, 0, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 158: array([1, 0, 0, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 159: array([1, 0, 0, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 160: array([1, 0, 1, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 161: array([1, 0, 1, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 162: array([1, 0, 1, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 163: array([1, 0, 1, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 164: array([1, 0, 1, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 165: array([1, 0, 1, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 166: array([1, 0, 1, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 167: array([1, 0, 1, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 168: array([1, 0, 1, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 169: array([1, 0, 1, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 170: array([1, 0, 1, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 171: array([1, 0, 1, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 172: array([1, 0, 1, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 173: array([1, 0, 1, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 174: array([1, 0, 1, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 175: array([1, 0, 1, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 176: array([1, 0, 1, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 177: array([1, 0, 1, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 178: array([1, 0, 1, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 179: array([1, 0, 1, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 180: array([1, 0, 1, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 181: array([1, 0, 1, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 182: array([1, 0, 1, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 183: array([1, 0, 1, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 184: array([1, 0, 1, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 185: array([1, 0, 1, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 186: array([1, 0, 1, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 187: array([1, 0, 1, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 188: array([1, 0, 1, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 189: array([1, 0, 1, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 190: array([1, 0, 1, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 191: array([1, 0, 1, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 192: array([1, 1, 0, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 193: array([1, 1, 0, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 194: array([1, 1, 0, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 195: array([1, 1, 0, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 196: array([1, 1, 0, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 197: array([1, 1, 0, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 198: array([1, 1, 0, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 199: array([1, 1, 0, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 200: array([1, 1, 0, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 201: array([1, 1, 0, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 202: array([1, 1, 0, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 203: array([1, 1, 0, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 204: array([1, 1, 0, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 205: array([1, 1, 0, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 206: array([1, 1, 0, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 207: array([1, 1, 0, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 208: array([1, 1, 0, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 209: array([1, 1, 0, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 210: array([1, 1, 0, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 211: array([1, 1, 0, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 212: array([1, 1, 0, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 213: array([1, 1, 0, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 214: array([1, 1, 0, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 215: array([1, 1, 0, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 216: array([1, 1, 0, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 217: array([1, 1, 0, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 218: array([1, 1, 0, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 219: array([1, 1, 0, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 220: array([1, 1, 0, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 221: array([1, 1, 0, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 222: array([1, 1, 0, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 223: array([1, 1, 0, 1, 1, 1, 1, 1], dtype=uint8),\n",
       " 224: array([1, 1, 1, 0, 0, 0, 0, 0], dtype=uint8),\n",
       " 225: array([1, 1, 1, 0, 0, 0, 0, 1], dtype=uint8),\n",
       " 226: array([1, 1, 1, 0, 0, 0, 1, 0], dtype=uint8),\n",
       " 227: array([1, 1, 1, 0, 0, 0, 1, 1], dtype=uint8),\n",
       " 228: array([1, 1, 1, 0, 0, 1, 0, 0], dtype=uint8),\n",
       " 229: array([1, 1, 1, 0, 0, 1, 0, 1], dtype=uint8),\n",
       " 230: array([1, 1, 1, 0, 0, 1, 1, 0], dtype=uint8),\n",
       " 231: array([1, 1, 1, 0, 0, 1, 1, 1], dtype=uint8),\n",
       " 232: array([1, 1, 1, 0, 1, 0, 0, 0], dtype=uint8),\n",
       " 233: array([1, 1, 1, 0, 1, 0, 0, 1], dtype=uint8),\n",
       " 234: array([1, 1, 1, 0, 1, 0, 1, 0], dtype=uint8),\n",
       " 235: array([1, 1, 1, 0, 1, 0, 1, 1], dtype=uint8),\n",
       " 236: array([1, 1, 1, 0, 1, 1, 0, 0], dtype=uint8),\n",
       " 237: array([1, 1, 1, 0, 1, 1, 0, 1], dtype=uint8),\n",
       " 238: array([1, 1, 1, 0, 1, 1, 1, 0], dtype=uint8),\n",
       " 239: array([1, 1, 1, 0, 1, 1, 1, 1], dtype=uint8),\n",
       " 240: array([1, 1, 1, 1, 0, 0, 0, 0], dtype=uint8),\n",
       " 241: array([1, 1, 1, 1, 0, 0, 0, 1], dtype=uint8),\n",
       " 242: array([1, 1, 1, 1, 0, 0, 1, 0], dtype=uint8),\n",
       " 243: array([1, 1, 1, 1, 0, 0, 1, 1], dtype=uint8),\n",
       " 244: array([1, 1, 1, 1, 0, 1, 0, 0], dtype=uint8),\n",
       " 245: array([1, 1, 1, 1, 0, 1, 0, 1], dtype=uint8),\n",
       " 246: array([1, 1, 1, 1, 0, 1, 1, 0], dtype=uint8),\n",
       " 247: array([1, 1, 1, 1, 0, 1, 1, 1], dtype=uint8),\n",
       " 248: array([1, 1, 1, 1, 1, 0, 0, 0], dtype=uint8),\n",
       " 249: array([1, 1, 1, 1, 1, 0, 0, 1], dtype=uint8),\n",
       " 250: array([1, 1, 1, 1, 1, 0, 1, 0], dtype=uint8),\n",
       " 251: array([1, 1, 1, 1, 1, 0, 1, 1], dtype=uint8),\n",
       " 252: array([1, 1, 1, 1, 1, 1, 0, 0], dtype=uint8),\n",
       " 253: array([1, 1, 1, 1, 1, 1, 0, 1], dtype=uint8),\n",
       " 254: array([1, 1, 1, 1, 1, 1, 1, 0], dtype=uint8),\n",
       " 255: array([1, 1, 1, 1, 1, 1, 1, 1], dtype=uint8)}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# генерация тренировочного датасета\n",
    "int2binary = {}\n",
    "binary_dim = 8\n",
    "\n",
    "largest_number = pow(2, binary_dim)\n",
    "binary = np.unpackbits(\n",
    "    np.array([np.arange(largest_number, dtype=np.uint8)]).T,\n",
    "    axis=1\n",
    ")\n",
    "\n",
    "for i in range(largest_number):\n",
    "    int2binary[i] = binary[i]\n",
    "\n",
    "display(binary, int2binary)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eG9jFpiDfjmO"
   },
   "source": [
    "Сначала рассмотрим всё по отдельности."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "IG_pMZc9fpKq"
   },
   "outputs": [],
   "source": [
    "# входные переменные\n",
    "learning_rate = 1\n",
    "input_dim = 2\n",
    "hidden_dim = 16\n",
    "output_dim = 1\n",
    "\n",
    "\n",
    "# инициализация весов нейронной сети\n",
    "weigths_0 = np.random.random((input_dim, hidden_dim))\n",
    "weigths_1 = np.random.random((hidden_dim, output_dim))\n",
    "weigths_h = np.random.random((hidden_dim, hidden_dim))\n",
    "\n",
    "weigths_0_update = np.zeros_like(weigths_0)\n",
    "weigths_1_update = np.zeros_like(weigths_1)\n",
    "weigths_h_update = np.zeros_like(weigths_h)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "23JC4-cAgQrd"
   },
   "source": [
    "Берем случайный объект для обучения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "yh7dJhLwgMze",
    "outputId": "9ce7ca48-f193-4171-81d6-e0d518d7ace0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    [0 0 0 0 1 0 0 1]\n",
      "b    [0 0 1 1 1 1 0 0]\n",
      "true [0 1 0 0 0 1 0 1]\n"
     ]
    }
   ],
   "source": [
    "# генерация простой проблемы сложения (a + b = true)\n",
    "a_int = np.random.randint(largest_number / 2) # int version\n",
    "a = int2binary[a_int] # бинарное кодирование\n",
    "\n",
    "b_int = np.random.randint(largest_number / 2) # int version\n",
    "b = int2binary[b_int] # бинарное кодирование\n",
    "\n",
    "# правильный ответ\n",
    "true_int = a_int + b_int\n",
    "true = int2binary[true_int]\n",
    "\n",
    "# место где мы располагаем наши лучше результаты (бинарно закодированные)\n",
    "pred = np.zeros_like(true)\n",
    "\n",
    "overallError = 0\n",
    "\n",
    "output_grads = []\n",
    "h_values = []\n",
    "h_values.append(np.zeros(hidden_dim))\n",
    "print('a   ', a)\n",
    "print('b   ', b)\n",
    "print('true', true)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "J-oo3IKXgJgw"
   },
   "source": [
    "<img src='https://drive.google.com/uc?export=view&id=1NCfOdVRM6A1oWLxljFQVb3ldFtuoOZP8'>\n",
    "\n",
    "\n",
    "$$h_t = \\sigma(W_{xh}x_t + W_{hh}h_{t-1} + b_h)$$\n",
    "$$y_t = W_{hy}h_t + b_y$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lBddPCJEgaeG"
   },
   "source": [
    "Рассмотрим Forward pass."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "mRwRdelAfmdD",
    "outputId": "252a0267-1b2b-4ad7-de63-e43bac6cced3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    [0 0 0 0 1 0 0 1]\n",
      "b    [0 0 1 1 1 1 0 0]\n",
      "true [0 1 0 0 0 1 0 1]\n",
      "X [[1 0]]\n",
      "y [[1]]\n",
      "h [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "(1, 16)\n",
      "output [[0.99347749]]\n",
      "output_error [[-0.00652251]]\n",
      "================================\n",
      "X [[0 0]]\n",
      "y [[0]]\n",
      "h [[0.63386027 0.6715468  0.64628827 0.63294764 0.60435748 0.65608461\n",
      "  0.60768396 0.70925592 0.72385455 0.59470289 0.68820161 0.62922533\n",
      "  0.63831185 0.71618109 0.51775155 0.52176856]]\n",
      "(1, 16)\n",
      "output [[0.99953702]]\n",
      "output_error [[0.99953702]]\n",
      "================================\n",
      "X [[0 1]]\n",
      "y [[1]]\n",
      "h [[0.99315525 0.99650619 0.99824672 0.98099711 0.99862104 0.98677456\n",
      "  0.98507713 0.994029   0.9945905  0.99653362 0.99466009 0.99395418\n",
      "  0.98778101 0.99050618 0.99455284 0.98371131]]\n",
      "(1, 16)\n",
      "output [[0.99956667]]\n",
      "output_error [[-0.00043333]]\n",
      "================================\n",
      "X [[1 1]]\n",
      "y [[0]]\n",
      "h [[0.99956192 0.99993906 0.99997081 0.99920254 0.99998876 0.99948335\n",
      "  0.99917311 0.99984328 0.99966581 0.99993042 0.99977123 0.99986292\n",
      "  0.99940046 0.99953657 0.99976708 0.99914108]]\n",
      "(1, 16)\n",
      "output [[0.9995673]]\n",
      "output_error [[0.9995673]]\n",
      "================================\n",
      "X [[0 1]]\n",
      "y [[0]]\n",
      "h [[0.99976386 0.99997196 0.99998515 0.99955723 0.99999321 0.9997429\n",
      "  0.99949317 0.99994006 0.9998786  0.9999559  0.9999028  0.99992494\n",
      "  0.99968166 0.99982839 0.99979705 0.99925392]]\n",
      "(1, 16)\n",
      "output [[0.99956675]]\n",
      "output_error [[0.99956675]]\n",
      "================================\n",
      "X [[0 1]]\n",
      "y [[0]]\n",
      "h [[0.99959185 0.99994273 0.99997291 0.99923736 0.99998964 0.99951015\n",
      "  0.99921588 0.999854   0.99968218 0.99993538 0.99978573 0.99987281\n",
      "  0.99943902 0.99956765 0.99978242 0.99918695]]\n",
      "(1, 16)\n",
      "output [[0.99956675]]\n",
      "output_error [[0.99956675]]\n",
      "================================\n",
      "X [[0 0]]\n",
      "y [[1]]\n",
      "h [[0.99959135 0.99994267 0.99997287 0.99923682 0.99998962 0.99950972\n",
      "  0.99921525 0.99985382 0.99968187 0.9999353  0.99978553 0.99987265\n",
      "  0.99943842 0.99956716 0.99978216 0.99918616]]\n",
      "(1, 16)\n",
      "output [[0.99956578]]\n",
      "output_error [[-0.00043422]]\n",
      "================================\n",
      "X [[0 0]]\n",
      "y [[0]]\n",
      "h [[0.999583   0.99986819 0.99994093 0.99818026 0.99997239 0.99891043\n",
      "  0.99875563 0.99968099 0.99964195 0.99987732 0.99975247 0.99967252\n",
      "  0.99905402 0.99934489 0.9997162  0.9982365 ]]\n",
      "(1, 16)\n",
      "output [[0.99956577]]\n",
      "output_error [[0.99956577]]\n",
      "================================\n"
     ]
    }
   ],
   "source": [
    "# FORWARD\n",
    "print('a   ', a)\n",
    "print('b   ', b)\n",
    "print('true', true)\n",
    "for position in range(binary_dim):\n",
    "    \n",
    "    # генерация input и output\n",
    "    X = np.array([[a[binary_dim - position - 1], \n",
    "                   b[binary_dim - position - 1]]])\n",
    "    print('X', X)\n",
    "    y = np.array([[true[binary_dim - position - 1]]]).T\n",
    "    print('y', y)\n",
    "    \n",
    "    print('h', h_values[-1])\n",
    "    # внутренний слой (input + предыдущий внутренний)\n",
    "    h = sigmoid(\n",
    "        np.dot(X, weigths_0) + np.dot(h_values[-1], weigths_h)\n",
    "    )\n",
    "    print(h.shape)\n",
    "    # output layer (новое бинарное представление)\n",
    "    output = sigmoid(\n",
    "        np.dot(h, weigths_1)\n",
    "    )\n",
    "    print('output', output)\n",
    "    # проверка упустили ли мы что-то и если да, то как много \n",
    "    output_error = output - y\n",
    "    print('output_error', output_error)\n",
    "\n",
    "    output_grads.append(\n",
    "        output_error * sigmoid_deriv(output)\n",
    "    )\n",
    "\n",
    "    # декодируем оценку\n",
    "    pred[binary_dim - position - 1] = np.round(output[0][0])\n",
    "    \n",
    "    # сохраняем внутренний слой,\n",
    "    # чтобы могли его использовать в след. итерации\n",
    "    h_values.append(copy.deepcopy(h))\n",
    "    print('=' * 32)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sfwKmGxDiDAR"
   },
   "source": [
    "Рассмотрим Backward pass.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1NCfOdVRM6A1oWLxljFQVb3ldFtuoOZP8'>\n",
    "\n",
    "$$h_t = \\sigma(W_{xh}x_t + W_{hh}h_{t-1} + b_h)$$\n",
    "$$y_t = W_{hy}h_t + b_y$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5j1svmdKiFsv",
    "outputId": "2df413c8-8978-43c2-bf3d-f440151cf295"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a    [0 0 0 0 1 0 0 1]\n",
      "b    [0 0 1 1 1 1 0 0]\n",
      "true [0 1 0 0 0 1 0 1]\n",
      "pred [1 1 1 1 1 1 1 1]\n",
      "X [[0 0]]\n",
      "X [[0 0]]\n",
      "X [[0 1]]\n",
      "X [[0 1]]\n",
      "X [[1 1]]\n",
      "X [[0 1]]\n",
      "X [[0 0]]\n",
      "X [[1 0]]\n"
     ]
    }
   ],
   "source": [
    "future_h_grad = np.zeros(hidden_dim)\n",
    "\n",
    "print('a   ', a)\n",
    "print('b   ', b)\n",
    "print('true', true)\n",
    "print('pred', pred)\n",
    "\n",
    "# BACKWARD\n",
    "for position in range(binary_dim):\n",
    "    \n",
    "    X = np.array([[a[position], b[position]]])\n",
    "    print('X', X)\n",
    "    h = h_values[-position - 1]\n",
    "    prev_h = h_values[-position - 2]\n",
    "    \n",
    "    # величина ошибки в output layer\n",
    "    output_grad = output_grads[-position - 1]\n",
    "\n",
    "    # величина ошибки в hidden layer\n",
    "    h_grad = (\n",
    "        future_h_grad.dot(weigths_h.T) \\\n",
    "        + output_grad.dot(weigths_1.T) \\\n",
    "    ) * sigmoid_deriv(h)\n",
    "\n",
    "    # обновление всех весов\n",
    "    weigths_1_update += np.atleast_2d(h).T @ output_grad\n",
    "    weigths_h_update += np.atleast_2d(prev_h).T @ h_grad\n",
    "    weigths_0_update += X.T @ h_grad\n",
    "    \n",
    "    future_h_grad = h_grad.copy()\n",
    "\n",
    "\n",
    "weigths_0 -= weigths_0_update * learning_rate\n",
    "weigths_1 -= weigths_1_update * learning_rate\n",
    "weigths_h -= weigths_h_update * learning_rate    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ImDA24GwjWQh"
   },
   "source": [
    "Все вместе."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0gsK53stQdGA",
    "outputId": "5128ec3c-f76b-4424-87d2-fc7bf65eab19"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: [1.99600086]\n",
      "Pred: [1 1 1 1 1 1 1 1]\n",
      "True: [1 0 1 1 1 1 1 0]\n",
      "123 + 67 = 255\n",
      "------------\n",
      "Error: [2.17685526]\n",
      "Pred: [0 0 0 0 0 0 0 0]\n",
      "True: [0 1 0 1 0 0 0 0]\n",
      "38 + 42 = 0\n",
      "------------\n",
      "Error: [4.37632175]\n",
      "Pred: [0 0 0 0 0 0 0 0]\n",
      "True: [1 0 0 1 1 1 1 1]\n",
      "37 + 122 = 0\n",
      "------------\n",
      "Error: [2.22168178]\n",
      "Pred: [1 0 0 0 0 0 1 0]\n",
      "True: [1 0 1 1 1 0 1 0]\n",
      "124 + 62 = 130\n",
      "------------\n",
      "Error: [0.16125203]\n",
      "Pred: [0 1 1 0 1 1 0 0]\n",
      "True: [0 1 1 0 1 1 0 0]\n",
      "0 + 108 = 108\n",
      "------------\n",
      "Error: [0.09925167]\n",
      "Pred: [1 0 0 0 1 1 0 0]\n",
      "True: [1 0 0 0 1 1 0 0]\n",
      "76 + 64 = 140\n",
      "------------\n",
      "Error: [0.25357831]\n",
      "Pred: [0 0 1 0 1 1 1 1]\n",
      "True: [0 0 1 0 1 1 1 1]\n",
      "47 + 0 = 47\n",
      "------------\n",
      "Error: [0.09623567]\n",
      "Pred: [0 0 0 0 1 0 1 1]\n",
      "True: [0 0 0 0 1 0 1 1]\n",
      "1 + 10 = 11\n",
      "------------\n",
      "Error: [0.10592094]\n",
      "Pred: [1 1 0 0 0 0 1 0]\n",
      "True: [1 1 0 0 0 0 1 0]\n",
      "74 + 120 = 194\n",
      "------------\n",
      "Error: [0.0718334]\n",
      "Pred: [0 1 0 0 1 0 1 0]\n",
      "True: [0 1 0 0 1 0 1 0]\n",
      "52 + 22 = 74\n",
      "------------\n"
     ]
    }
   ],
   "source": [
    "# входные переменные\n",
    "learning_rate = 1\n",
    "input_dim = 2\n",
    "hidden_dim = 16\n",
    "output_dim = 1\n",
    "\n",
    "\n",
    "# инициализация весов нейронной сети\n",
    "weigths_0 = np.random.random((input_dim, hidden_dim))\n",
    "weigths_1 = np.random.random((hidden_dim, output_dim))\n",
    "weigths_h = np.random.random((hidden_dim, hidden_dim))\n",
    "\n",
    "weigths_0_update = np.zeros_like(weigths_0)\n",
    "weigths_1_update = np.zeros_like(weigths_1)\n",
    "weigths_h_update = np.zeros_like(weigths_h)\n",
    "\n",
    "\n",
    "# тренировочная логика\n",
    "for j in range(10000):\n",
    "    \n",
    "    # генерация простой проблемы сложения (a + b = true)\n",
    "    a_int = np.random.randint(largest_number / 2) # int version\n",
    "    a = int2binary[a_int] # бинарное кодирование\n",
    "\n",
    "    b_int = np.random.randint(largest_number / 2) # int version\n",
    "    b = int2binary[b_int] # бинарное кодирование\n",
    "\n",
    "    # правильный ответ\n",
    "    true_int = a_int + b_int\n",
    "    true = int2binary[true_int]\n",
    "    \n",
    "    # место где мы располагаем наши лучше результаты (бинарно закодированные)\n",
    "    pred = np.zeros_like(true)\n",
    "\n",
    "    overallError = 0\n",
    "    \n",
    "    output_grads = []\n",
    "    h_values = []\n",
    "    h_values.append(np.zeros(hidden_dim))\n",
    "    \n",
    "    # FORWARD\n",
    "    for position in range(binary_dim):\n",
    "        \n",
    "        # генерация input и output\n",
    "        X = np.array([[a[binary_dim - position - 1], \n",
    "                       b[binary_dim - position - 1]]])\n",
    "    \n",
    "        y = np.array([[true[binary_dim - position - 1]]]).T\n",
    "      \n",
    "        # внутренний слой (input + предыдущий внутренний)\n",
    "        h = sigmoid(\n",
    "            np.dot(X, weigths_0) + np.dot(h_values[-1], weigths_h)\n",
    "        )\n",
    "\n",
    "        # output layer (новое бинарное представление)\n",
    "        output = sigmoid(\n",
    "            np.dot(h, weigths_1)\n",
    "        )\n",
    "        \n",
    "        # проверка упустили ли мы что-то и если да, то как много \n",
    "        output_error = output - y\n",
    "        output_grads.append(\n",
    "            output_error * sigmoid_deriv(output)\n",
    "        )\n",
    "        overallError += np.abs(output_error[0])\n",
    "    \n",
    "        # декодируем оценку\n",
    "        pred[binary_dim - position - 1] = np.round(output[0][0])\n",
    "        \n",
    "        # сохраняем внутренний слой,\n",
    "        # чтобы могли его использовать в след. итерации\n",
    "        h_values.append(copy.deepcopy(h))\n",
    "    \n",
    "    future_h_grad = np.zeros(hidden_dim)\n",
    "    \n",
    "    # BACKWARD\n",
    "    for position in range(binary_dim):\n",
    "        \n",
    "        X = np.array([[a[position], b[position]]])\n",
    "        \n",
    "        h = h_values[-position - 1]\n",
    "        prev_h = h_values[-position - 2]\n",
    "        \n",
    "        # величина ошибки в output layer\n",
    "        output_grad = output_grads[-position - 1]\n",
    "\n",
    "        # величина ошибки в hidden layer\n",
    "        h_grad = (\n",
    "            future_h_grad.dot(weigths_h.T) \\\n",
    "            + output_grad.dot(weigths_1.T) \\\n",
    "        ) * sigmoid_deriv(h)\n",
    "\n",
    "        weigths_1_update += np.atleast_2d(h).T @ output_grad\n",
    "        weigths_h_update += np.atleast_2d(prev_h).T @ h_grad\n",
    "        weigths_0_update += X.T @ h_grad\n",
    "        \n",
    "        future_h_grad = h_grad.copy()\n",
    "    \n",
    "\n",
    "    weigths_0 -= weigths_0_update * learning_rate\n",
    "    weigths_1 -= weigths_1_update * learning_rate\n",
    "    weigths_h -= weigths_h_update * learning_rate    \n",
    "\n",
    "    weigths_0_update *= 0\n",
    "    weigths_1_update *= 0\n",
    "    weigths_h_update *= 0\n",
    "    \n",
    "    # вывод на экран процесса обучения\n",
    "    if (j % 1000 == 0):\n",
    "        print(f\"Error: {overallError}\")\n",
    "        print(f\"Pred: {pred}\")\n",
    "        print(f\"True: {true}\")\n",
    "        out = 0\n",
    "        for index, x in enumerate(reversed(pred)):\n",
    "            out += x * pow(2, index)\n",
    "        print(str(a_int) + \" + \" + str(b_int) + \" = \" + str(out))\n",
    "        print(\"------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iEdsRpQ0F7yZ"
   },
   "source": [
    "Еще раз посмотрим на примеры задач и с помощью каких архитектур это можно сделать.\n",
    "\n",
    "Задача многие к одному:\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1BznMVNlHauw88mRY-heBgjWZVwPAJ3HR' width=650>\n",
    "\n",
    "Задача один ко многим:\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1j82MOyIEvbm41iLu7ISzab7FMrsDpPgO' width=650>\n",
    "\n",
    "Задача многие ко многим:\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1uOHQX8AnPGKY6HEDOTRJzVxCiKAHLoJy' width=650>\n",
    "\n",
    "Здесь можно заметить проблему, что предложения могут быть очень длинными, а нужно сжать всю информацию о предыдущих словах в один блок, который представляет собой внутренний слой - переходное состояние из кодировщика в декодировщика.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8DWcOZbQTEO6"
   },
   "source": [
    "## Vanishing gradient problem\n",
    "\n",
    "Хотелось бы обрабатывать длинные последовательности текста и так же учитывать побольше контекста из предыдущих слов. (В конце предложении хорошо бы вспомнить, что происходило в начале предложения.)\n",
    "\n",
    "Из материалов по сверточным нейронным сетям нам известна проблема исчезающего градиента. В случае с большим количеством слоев значение градиента при последовательном обновлении большого количества слоев становится все меньше и может стать настолько маленьким, что не сможет в принципе существенно изменить поведение нейронов. В рекуррентных нейронных сетях из-за сигнала циркулирующего внутри слоев это проблема становится еще острее. Причем градиент может стать не только очень маленьким, но и очень большим.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "c9DPpDu5TEPB"
   },
   "source": [
    "## Long Short Term Memory (LSTM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "t7Pz6SczTEPC"
   },
   "source": [
    "Решить проблему исчезающего градиента призвана разновидность RNN под названием LSTM.\n",
    "\n",
    "**Long short-term memory (LSTM) юниты** - это блоки, из которых состоят слои одной из разновидностей рекуррентной нейронной сети (RNN). Обычно LSTM юнит представляет из себя ячейку состоящую из input gate, output gate и forget gate. Эти ячейки отвественны за запоминания значений на определенные промежутки времени. RNN, состоящая из LSTM юнитов иногда называется просто LSTM. \n",
    "\n",
    "<img src='https://neerc.ifmo.ru/wiki/images/thumb/9/98/LSTM.png/650px-LSTM.png' width=700>\n",
    "\n",
    "\n",
    "Здесь не просто распространяется сигнал, но и происходит управление размером влияния того, что приходит из предыдущего состояния. Каждый из этих элементов можно представить как типичный искусственный нейрон, который вычисляет активацию как взвешенную сумму. Их работа сводится к регуляции потока значений через блок LSTM, поэтому они и называются ворота или затворы (gate). Задача gate'ов - открыть пошире двери или закрыть её. Есть три gate:\n",
    "1. Input gate - gate входного сигнала обеспечивает возможность меньше влиять предыдущему состоянию на текущее состояние\n",
    "2. Output gate - gate выходного сигнала\n",
    "3. Forget gate - gate забывания управляет очисткой памяти, скоростью забывания предыдущего состояния. Хранить эту информацию данная ячейка может очень долго.\n",
    "\n",
    "\n",
    "Из-за этих настраиваемых параметров, LSTM более сложная модель по сравнению с RNN. Значит она требует больше времени, больше примеров."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d0N78xUu9o80"
   },
   "source": [
    "Понятие долгой памяти в названии возникло из-за того, что они могут запоминать информацию на более длинный период времени, чем обычная RNN. LSTM хорошо подходит для классификации процессов и предсказания временных последовательностей неизвестного размера и неизвестных промежутков между важными событиями. С технической точки зрения это достигается за счет ликвидации проблем связанных с exploding и vanishing gradient'ами. Ошибки сохраняются в самом слое, что позволяет передавать градиенты в следующие слои практически без потерь."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d2G1iE8tTEPI"
   },
   "source": [
    "### Компоненты LSTM.  \n",
    "Ниже приведен список компонентов из которых состоит ячейка LSTM:\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zimic5tDrMs3"
   },
   "source": [
    "Ключевой момент в LSTM - это **состояние ячейки** - горизонтальная линия сверху диаграммы. Сигнал протекает из ячейки в ячейку с небольшими линейными преобразования.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1OCGD3pD59gatmH54ML8UEzv2OUvpU5Rf'>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "snNtXVicsEvt"
   },
   "source": [
    "У LSTM есть способность удалять или добавлять информацию в состояние ячейки с помощью gate'ов.\n",
    "\n",
    "Гейты пропускают информацию по возможности. Они состоят из сигмоиды и перемножения матриц. Выход с сигмоиды от 0 до 1 описывает с какой силой сигнал может пройти дальше. Значения 0 значит \"ничего не пройдет\", а 1 - \"пропускай всё\".\n",
    "\n",
    "У LSTM есть три гейта, чтобы сохранять и контролировать состояние ячейки."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SDZyDDREtgFF"
   },
   "source": [
    "**Forget gate**\n",
    "\n",
    "Первый шаг в LSTM - это решить, от какой информации мы хотим избавиться. Это решение принимает слой с сигмоидой, который называется \"forget gate layer.\" (гейт забывания). Он принимает во внимание $h_{t−1}$ и $x_t$, а на выходе даёт значение между 0 и 1 для каждого числа в состоянии ячейки $C_{t−1}$. 1 значит \"полностью сохрани это\", а 0 - \"полностью забудь это\".\n",
    "\n",
    "Пример забывания - языковая модель пытается предсказать следующее слово базируясь на предыдущих. Здесь модель может запоминать род объекта, чтобы использовать правильное образование слов. Когда мы видим новый объект, то нужно забыть род предыдущего объекта. *(Животное не переходило дорогу, потому что оно устало)*\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1oYGrHhH6y4_DtwRcKJDjzvYVChPEMblR'>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sg2XTz8Bu2vq"
   },
   "source": [
    "**Input gate**\n",
    "\n",
    "Следующий шаг - решить, какую информацию мы должны хранить в состоянии ячейки. Шаг состоит из двух частей. Первая - слой сигмоиды, называемый \"input gate layer\" (входной гейт), который решает какие значения будут обновляться. Вторая - слой с тангенсом, который создает вектор значений $\\tilde{C}_t$, которые будут добавляться к состоянию ячейки.\n",
    "\n",
    "С примером языковой модели, мы бы хотели добавлять род нового объекта в состояние ячейки, чтобы заменить старый род, который мы забудем. *(Животное не переходило дорогу, потому что оно устало)*\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1kb4hs0Y1cLb55sl-iRPsxMuNzLlu5qXb'>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XWAx-0CMwRMP"
   },
   "source": [
    "**Update cell state**\n",
    "\n",
    "Сейчас самое время, чтобы обновить старое состояние $C_{t−1}$ в новое состояние $C_t$. Предыдущие шаги уже решили, что делать, нужно только сделать это.\n",
    "\n",
    "Умножаем старое состояние на $f_t$, тем самым забывая те вещи, которые хотели забыть, затем прибавляем $i_t∗\\tilde{C_t}$. Это новое значение состояния ячейки, которое отмасштабировано в зависимоcти от того, насколько мы хотим обновить новое значение.\n",
    "\n",
    "В языковой модели, это момент, где мы выкидываем информацию о роде старого объекта и добавляем новую информацию о роде нового объекта. *(Животное не переходило дорогу, потому что оно устало)*\n",
    "\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1oKlTuYYRwdnvfMUQW0FjHRWgtHy0xl1M'>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FuJxpzKLzviM"
   },
   "source": [
    "**Output gate**\n",
    "\n",
    "Наконец-то нам нужно решить, что мы отправим на выход. Выход будет базироваться на состоянии ячейки, но с небольшой фильтрацией. Во-первых, прогоним входной сигнал через сигмоиду, которая решает с какой силой дальше пропускать сигнал, во-вторых, прогоняем состояние ячейки через тангенс и умножаем это на сигмоиду, чтобы пропускать дальше только то, что мы решили пропустить.\n",
    "\n",
    "Для языковой модели, которая видит только объект, здесь можем пропустить информацию, связанную с глаголом. Например, на выходе может быть полезно число множественной или единственное у объекта, чтобы знать в какую форму нужно поставить глагол. *(Животное не переходило дорогу, потому что оно устало)*\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=12SBxiBO-knE250rVlTxSYkmGWLjzFHL0'>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "id": "Ti8Dthf6T-QD"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Input, LSTM, Dense, Flatten, Dropout\n",
    "from tensorflow.keras.models import Model\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "pAOEjITXT3Rh",
    "outputId": "a23bd941-b24a-40c9-d8f9-d12188ac2e16"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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i9P/OS0tTStevLj23//+N/3Prl69qgUGBmpz585VUKF1/P290jRNGzBggNatWzcl9VjdhQsXNABadHS0pmnyOcqdO7f23XffpX/NgQMHNADapk2bVJVpCX9/rzRN01q0aKGNGjVKXVEWVqhQIe2rr76yxGfK9k8sbty4ge3btyMiIiL9z/z8/BAREYFNmzYprMyaDh8+jLCwMJQvXx59+vTByZMnVZdkeceOHcO5c+du+YyFhISgYcOG/IxlYu3atShatCiqVKmC4cOH4/Lly6pLsoTY2FgAwH333QcA2L59O1JSUm75bFWtWhWlS5f2+c/W398r3ezZsxEaGorq1atjzJgxuH79uoryLCM1NRXz5s1DQkICGjVqZInPlNcPITPapUuXkJqaimLFit3y58WKFcMff/yhqCpratiwIaZPn44qVarg7NmzGDduHJo1a4a9e/ciKChIdXmWde7cOQC442dM/zty69ChA3r06IFy5crh6NGj+Mc//oGOHTti06ZNyJUrl+rylElLS8MLL7yAJk2aoHr16gDksxUQEICCBQve8rW+/tm603sFAE8++STKlCmDsLAw7N69G6+99hoOHjyIRYsWKaxWjT179qBRo0ZISkpCgQIFsHjxYlSrVg27du1S/pmyfbCgrOvYsWN6u2bNmmjYsCHKlCmDb7/9Fk899ZTCyshJevfund6uUaMGatasiQoVKmDt2rVo06aNwsrUGjFiBPbu3ct5TVmQ2Xs1dOjQ9HaNGjVQokQJtGnTBkePHkWFChW8XaZSVapUwa5duxAbG4sFCxZgwIABiI6OVl0WAAdM3gwNDUWuXLlum/F6/vx5FC9eXFFV9lCwYEFUrlwZR44cUV2KpemfI37Gsqd8+fIIDQ316c/ZyJEjsWzZMkRFRaFUqVLpf168eHHcuHEDV69eveXrffmzldl7dScNGzYEAJ/8bAUEBKBixYqoW7cuIiMjUatWLXzyySeW+EzZPlgEBASgbt26WL16dfqfpaWlYfXq1WjUqJHCyqzv2rVrOHr0KEqUKKG6FEsrV64cihcvfstnLC4uDlu2bOFnLAtOnTqFy5cv++TnTNM0jBw5EosXL8aaNWtQrly5W/6+bt26yJ079y2frYMHD+LkyZM+99m613t1J7t27QIAn/xs/V1aWhqSk5Ot8ZnyyhRRk82bN08LDAzUpk+fru3fv18bOnSoVrBgQe3cuXOqS7OUl156SVu7dq127Ngx7ddff9UiIiK00NBQ7cKFC6pLUy4+Pl7buXOntnPnTg2A9uGHH2o7d+7UTpw4oWmapo0fP14rWLCg9v3332u7d+/WunXrppUrV05LTExUXLn33e29io+P115++WVt06ZN2rFjx7RffvlFq1OnjlapUiUtKSlJdeleN3z4cC0kJERbu3atdvbs2fTX9evX079m2LBhWunSpbU1a9Zo27Zt0xo1aqQ1atRIYdVq3Ou9OnLkiPbWW29p27Zt044dO6Z9//33Wvny5bXmzZsrrtz7Xn/9dS06Olo7duyYtnv3bu3111/XXC6X9tNPP2mapv4z5YhgoWma9umnn2qlS5fWAgICtAYNGmibN29WXZLl9OrVSytRooQWEBCglSxZUuvVq5d25MgR1WVZQlRUlAbgtteAAQM0TZMlp//+97+1YsWKaYGBgVqbNm20gwcPqi1akbu9V9evX9fatWunFSlSRMudO7dWpkwZbciQIT4b8u/0PgHQpk2blv41iYmJ2rPPPqsVKlRIy5cvn9a9e3ft7Nmz6opW5F7v1cmTJ7XmzZtr9913nxYYGKhVrFhRe+WVV7TY2Fi1hSswePBgrUyZMlpAQIBWpEgRrU2bNumhQtPUf6Z4bDoREREZxvZzLIiIiMg6GCyIiIjIMAwWREREZBgGCyIiIjIMgwUREREZhsGCiIiIDMNgQURERIZhsCAiIiLDMFgQERGRYRgsiIiIyDAMFkRERGQYBgsiIiIyzP8BCjDW6tZiV60AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 300\n",
    "t = np.linspace(0, 30, N).reshape((N, 1))\n",
    "x_t = np.sin(t) + t * 0.2\n",
    "\n",
    "x_len = 7  # длина истории\n",
    "n = 2  # длина вектора данных\n",
    "\n",
    "plt.plot(t, x_t, '-b');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "G4NPzVEeT3YB",
    "outputId": "3b8ab7fa-a630-431a-aab4-48528d3ba1b8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 7, 2)]            0         \n",
      "                                                                 \n",
      " lstm (LSTM)                 (None, 128)               67072     \n",
      "                                                                 \n",
      " dense (Dense)               (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 67,201\n",
      "Trainable params: 67,201\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "input = Input(shape=(x_len, 2))\n",
    "output = LSTM(units=128, dropout=0.0)(input)\n",
    "output = Dense(1, activation='linear')(output)\n",
    "\n",
    "model = Model(input, output)\n",
    "model.compile(optimizer='Adam',\n",
    "              loss='mse',\n",
    "              metrics=['mse'])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "pSZAbw7rVHFL"
   },
   "outputs": [],
   "source": [
    "X = []\n",
    "y = []\n",
    "\n",
    "for i in range(N - x_len - 1):\n",
    "    X.append(np.concatenate(\n",
    "                (t[i: x_len + i], x_t[i: x_len + i])\n",
    "        ).reshape((2, x_len)).T\n",
    "    )\n",
    "    y.append(x_t[i + x_len])\n",
    "\n",
    "X = np.array(X)\n",
    "y = np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "CdhS2xgLP6yX",
    "outputId": "3f372dcb-e2a1-4cb5-b645-1ff3bf22b12d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X[0][:, 0], X[0][:, 1], '.-b')\n",
    "plt.plot(t[x_len], y[0], '.r');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qe-A1Y9OVGz3",
    "outputId": "d64b10c5-ab27-4168-9420-8989271c77b4",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "7/7 [==============================] - 2s 83ms/step - loss: 6.5285 - mse: 6.5285 - val_loss: 16.7470 - val_mse: 16.7470\n",
      "Epoch 2/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 1.5403 - mse: 1.5403 - val_loss: 6.9498 - val_mse: 6.9498\n",
      "Epoch 3/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 1.4106 - mse: 1.4106 - val_loss: 5.1047 - val_mse: 5.1047\n",
      "Epoch 4/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.8473 - mse: 0.8473 - val_loss: 5.5043 - val_mse: 5.5043\n",
      "Epoch 5/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.6158 - mse: 0.6158 - val_loss: 4.8662 - val_mse: 4.8662\n",
      "Epoch 6/20\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.5116 - mse: 0.5116 - val_loss: 3.4570 - val_mse: 3.4570\n",
      "Epoch 7/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.3689 - mse: 0.3689 - val_loss: 2.2828 - val_mse: 2.2828\n",
      "Epoch 8/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.2849 - mse: 0.2849 - val_loss: 1.8517 - val_mse: 1.8517\n",
      "Epoch 9/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.1953 - mse: 0.1953 - val_loss: 1.1592 - val_mse: 1.1592\n",
      "Epoch 10/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.1205 - mse: 0.1205 - val_loss: 0.9019 - val_mse: 0.9019\n",
      "Epoch 11/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.0951 - mse: 0.0951 - val_loss: 0.6015 - val_mse: 0.6015\n",
      "Epoch 12/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.0859 - mse: 0.0859 - val_loss: 0.6207 - val_mse: 0.6207\n",
      "Epoch 13/20\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.0790 - mse: 0.0790 - val_loss: 0.5685 - val_mse: 0.5685\n",
      "Epoch 14/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.0767 - mse: 0.0767 - val_loss: 0.5056 - val_mse: 0.5056\n",
      "Epoch 15/20\n",
      "7/7 [==============================] - 0s 12ms/step - loss: 0.0764 - mse: 0.0764 - val_loss: 0.4307 - val_mse: 0.4307\n",
      "Epoch 16/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.0662 - mse: 0.0662 - val_loss: 0.3915 - val_mse: 0.3915\n",
      "Epoch 17/20\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.0624 - mse: 0.0624 - val_loss: 0.3779 - val_mse: 0.3779\n",
      "Epoch 18/20\n",
      "7/7 [==============================] - 0s 12ms/step - loss: 0.0583 - mse: 0.0583 - val_loss: 0.3221 - val_mse: 0.3221\n",
      "Epoch 19/20\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.0548 - mse: 0.0548 - val_loss: 0.2916 - val_mse: 0.2916\n",
      "Epoch 20/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.0522 - mse: 0.0522 - val_loss: 0.2660 - val_mse: 0.2660\n",
      "CPU times: user 4.41 s, sys: 713 ms, total: 5.12 s\n",
      "Wall time: 3.28 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fa3e3b19cd0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "test_n = 200\n",
    "model.fit(X[:test_n], y[:test_n],\n",
    "          epochs=20,\n",
    "          validation_data=(X[test_n:], y[test_n:])\n",
    "          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "khe6ufw-E3f6",
    "outputId": "8ab6c582-7856-45bb-9060-438d548f2b79"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 2ms/step - loss: 0.0508 - mse: 0.0508\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.050804346799850464, 0.050804346799850464]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X[:test_n], y[:test_n])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "Wh0-FtF-YtmE",
    "outputId": "68ea4c84-9585-44ae-c125-70d0bc72745d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X[:test_n])\n",
    "\n",
    "plt.plot(y_pred, '.r', label='predicted')\n",
    "plt.plot(y[:test_n], 'g', label='true')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "XV-NsrhLYH0a",
    "outputId": "a6dce743-3de7-48f1-9364-70bbd509971d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X[test_n:])\n",
    "\n",
    "plt.plot(y_pred, '.r', label='predicted')\n",
    "plt.plot(y[test_n:], 'g', label='true')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "guYTy52CTEPL"
   },
   "source": [
    "## Gated Recurrent Unit (GRU)\n",
    "\n",
    "Теперь, когда мы знаем как работает LSTM, давайте бегло взглянем на то, как работате GRU. GRU это более новое поколение рекуррентных нейронных сетей и оно во многом похоже на LSTM. Но есть определенная разница. В GRU не используется состояние ячейки и используется скрытое состояние для передачи информации. В GRU также есть два затвора - reset gate и update gate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hcK7KuHeAS-0"
   },
   "source": [
    "<img src='https://drive.google.com/uc?export=view&id=1dueNTzgtKPh3giYl-8PnJIR1uMI7dKLL' width=700>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6Nlu3bcUTEPS"
   },
   "source": [
    "Update Gate обновляет затворы действуя подобно forget и input gate, которые используются в LSTM. Он решает какая информация будет отброшена, а какая новая информация будет добавлена. Reset Gate - это другой затвор, использующийся для принятия решения, как много прошлой информации будет забыто. В этих особенностях и заключается архитектура GRU. GRU имеет меньше тензорных операций и соответственно тренеруется быстре, чем LSTM. Однако нельзя сказать точно, какая архитектура лучше. Исследователи и инженеры пытаются определить, что в каждом конкретном случае подойдет больше. Если говорить упрощенно, то GRU может подойти тогда, когда важнее скорость, чем точность, а LSTM тогда, когда важнее точность, чем скорость. \n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1nwWR-inD0dbp2M5m-lUyr9l50Q2lWPJM'>\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1JELilnaBhXs70OQISNs0QZWKVLr7fYPp' width=400>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9XKvuvLiD3_B",
    "outputId": "671676be-ca95-481c-ad27-ac7a01c19d57"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_2 (InputLayer)        [(None, 7, 2)]            0         \n",
      "                                                                 \n",
      " gru (GRU)                   (None, 128)               50688     \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 50,817\n",
      "Trainable params: 50,817\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.layers import GRU\n",
    "\n",
    "\n",
    "input = Input(shape=(x_len, 2))\n",
    "output = GRU(units=128, dropout=0.0)(input)\n",
    "output = Dense(1, activation='linear')(output)\n",
    "\n",
    "model = Model(input, output)\n",
    "model.compile(optimizer='Adam', loss='mse', metrics=['mse'])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "XYH7T6caEBp5",
    "outputId": "6d18b822-fe93-4ff7-942c-9d21a0d6d5a6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "7/7 [==============================] - 2s 54ms/step - loss: 4.8724 - mse: 4.8724 - val_loss: 7.3272 - val_mse: 7.3272\n",
      "Epoch 2/20\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 1.3797 - mse: 1.3797 - val_loss: 2.2020 - val_mse: 2.2020\n",
      "Epoch 3/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 1.1542 - mse: 1.1542 - val_loss: 3.0539 - val_mse: 3.0539\n",
      "Epoch 4/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.6424 - mse: 0.6424 - val_loss: 3.6221 - val_mse: 3.6221\n",
      "Epoch 5/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.6032 - mse: 0.6032 - val_loss: 2.2385 - val_mse: 2.2385\n",
      "Epoch 6/20\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.4492 - mse: 0.4492 - val_loss: 1.4143 - val_mse: 1.4143\n",
      "Epoch 7/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.3977 - mse: 0.3977 - val_loss: 1.2904 - val_mse: 1.2904\n",
      "Epoch 8/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.3369 - mse: 0.3369 - val_loss: 1.2180 - val_mse: 1.2180\n",
      "Epoch 9/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.2808 - mse: 0.2808 - val_loss: 0.9277 - val_mse: 0.9277\n",
      "Epoch 10/20\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.2242 - mse: 0.2242 - val_loss: 0.7551 - val_mse: 0.7551\n",
      "Epoch 11/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.1706 - mse: 0.1706 - val_loss: 0.6675 - val_mse: 0.6675\n",
      "Epoch 12/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.1244 - mse: 0.1244 - val_loss: 0.5012 - val_mse: 0.5012\n",
      "Epoch 13/20\n",
      "7/7 [==============================] - 0s 7ms/step - loss: 0.0908 - mse: 0.0908 - val_loss: 0.3677 - val_mse: 0.3677\n",
      "Epoch 14/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.0701 - mse: 0.0701 - val_loss: 0.4184 - val_mse: 0.4184\n",
      "Epoch 15/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.0839 - mse: 0.0839 - val_loss: 0.2658 - val_mse: 0.2658\n",
      "Epoch 16/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.0758 - mse: 0.0758 - val_loss: 0.2572 - val_mse: 0.2572\n",
      "Epoch 17/20\n",
      "7/7 [==============================] - 0s 10ms/step - loss: 0.0624 - mse: 0.0624 - val_loss: 0.2946 - val_mse: 0.2946\n",
      "Epoch 18/20\n",
      "7/7 [==============================] - 0s 8ms/step - loss: 0.0494 - mse: 0.0494 - val_loss: 0.2166 - val_mse: 0.2166\n",
      "Epoch 19/20\n",
      "7/7 [==============================] - 0s 9ms/step - loss: 0.0452 - mse: 0.0452 - val_loss: 0.2110 - val_mse: 0.2110\n",
      "Epoch 20/20\n",
      "7/7 [==============================] - 0s 11ms/step - loss: 0.0413 - mse: 0.0413 - val_loss: 0.1867 - val_mse: 0.1867\n",
      "CPU times: user 3.91 s, sys: 641 ms, total: 4.55 s\n",
      "Wall time: 2.87 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fa3e3d03be0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "test_n = 200\n",
    "model.fit(X[:test_n], y[:test_n],\n",
    "          epochs=20,\n",
    "          validation_data=(X[test_n:], y[test_n:])\n",
    "          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "07-A1jQBFGJd",
    "outputId": "1ac34d37-87bf-47cc-ada5-4abb19d93073"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 2ms/step - loss: 0.0381 - mse: 0.0381\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.038077592849731445, 0.038077592849731445]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X[:test_n], y[:test_n])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "d1zYi8MTEBjq",
    "outputId": "9f4eaf33-2b97-4f3b-d59b-c1944179b21b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X[:test_n])\n",
    "\n",
    "plt.plot(y_pred, '.r', label='predicted')\n",
    "plt.plot(y[:test_n], 'g', label='true')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 282
    },
    "id": "40tECAywEJOC",
    "outputId": "85cff644-4a48-443a-cff5-bbe267cd5cb0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3/3 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X[test_n:])\n",
    "\n",
    "plt.plot(y_pred, '.r', label='predicted')\n",
    "plt.plot(y[test_n:], 'g', label='true')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VibWuP0jGt4F"
   },
   "source": [
    "## Attention"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TLDjJ2kkH3iK"
   },
   "source": [
    "С какими проблемами еще можем столкнуться? Снова поговорим про машинный перевод.\n",
    "\n",
    "Примеры из статьи [Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation](https://arxiv.org/abs/1609.08144).\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1uOHQX8AnPGKY6HEDOTRJzVxCiKAHLoJy' width=450>\n",
    "\n",
    "Нужно сжать всю информацию о предыдущих словах в один блок, который представляет собой внутренний слой - переходное состояние из кодировщика в декодировщика, что очень сложная задача, которая приводит к недообучению.\n",
    "\n",
    "И одно из возможных решений - это настакать слои LSTM, один слой LSTM создает вход для другого слоя LSTM:\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1yrBxb5DXZA-LNwNWQdmuF4TNNXqTfNpJ' width=450>\n",
    "\n",
    "Но эту вещь очень тяжело обучать, если добавлять всё больше LSTM слоем, то снова встречаемся с проблемой затухающих градиентов, плюсом, всё равно нужно сжимать всю информацию в последние блоки - это наш bottleneck (узкое место, горлышко бутылки) между кодировщик и декодировщиком.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hY_szeB8KpkH"
   },
   "source": [
    "И решение этой проблемы - Attention слой. Вместо того, чтобы сжимать всю информацию из всех временных ячеек в одно скрытое состояние, можно дать доступ декодировщику ко всей истории. Но получаем очень слишком много информации, которую нужно учитывать, поэтому мы будем обращать свое внимание только на подвыборку этих ячеек.\n",
    "\n",
    "Будем учитывать, какая часть предложения на английском языке важна для предсказания слова на французском языке. Подсчет такого распределения достигается получением оценки релевантности каждого слова в предложении для получения нового слова.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1GAVWyShMSXELaz1f-_e4c9rAeDoJ3QE_' width=450>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2CKXDdDGOTB2"
   },
   "source": [
    "**Как использовать эти оценки релевантности?**\n",
    "\n",
    "Подсчитываются оценки для каждого скрытого состояния и образуют собой взвешанную сумму внимания. А потом эта сумма передается, как еще один вход в декодировщик.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1a72Ake6Ai2SdkZ9cQpqmq6-ebjblcQ34' width=450>\n",
    "\n",
    "Можно [провизуализировать](https://distill.pub/2016/augmented-rnns/#attentional-interfaces), какое внимание уделяется каждому слову из предложения:\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1WcRiqQ5fG7kQPTbISHgRYYwbBbLetDOL' width=800>\n",
    "\n",
    "А ещё слои внимания можно добавлять и не только к текстам, но и к картинкам.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1i48NmZMXUneeUwW339tSgvrGU_VvLh9H'>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YVZ6r22LPCou"
   },
   "source": [
    "## Bidirectional LSTM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GzYDuSb-G8h3"
   },
   "source": [
    "https://keras.io/examples/nlp/bidirectional_lstm_imdb/\n",
    "\n",
    "Еще одна проблема с LSTM - они учитывают только контекст до слова. Почему это может быть плохо? К примеру, слово \"quick\" может значит очень много вещей и смысл слова будет понятен только после прочтения слов, которые идут после него.\n",
    "\n",
    "Идея решения проблемы - использовать LSTM слой для прямого контекста и еще слой LSTM для обратного контекста - это будет двунаправленный слой LSTM (Bidirectional LSTM).\n",
    "\n",
    "\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1kCGsUWhUjIoIAquvE7FjaAbYjAQdsyW7' width=550>\n",
    "\n",
    "А так будет выглядеть сеть, если всё объединить вместе.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1FdhBWJFQKEpM8lUZ-E2hlTWCmNj361Lg' width=450>\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D20CRso9TEPU"
   },
   "source": [
    "## Практика"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uWjMmd6SAxdY"
   },
   "source": [
    "### IMDB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BcavVsOfTEPh"
   },
   "source": [
    "Теперь давайте попробуем с помощью Keras построить LSTM нейронную сеть для оценки настроений отзывов на IMDB."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "k5mxcMT2TEPi"
   },
   "source": [
    "Данный датасет слишком мал, чтобы преимущества LSTM проявились, однако в учебных целях он подойдет.\n",
    "\n",
    "В тренировке рекуррентных нейронных сетей важную роль играет размер batch, но еще большую роль играет выбор функций loss и optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "wuI6h_TyEhvl"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "IM1n34PCTEPk",
    "outputId": "eaf10f3e-3c71-46f7-f521-a52a2a7ac6a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загрузка данных...\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n",
      "17464789/17464789 [==============================] - 32s 2us/step\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.preprocessing import sequence\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Embedding\n",
    "from keras.layers import LSTM\n",
    "from keras.datasets import imdb\n",
    "\n",
    "max_features = 10000\n",
    "\n",
    "# обрезаем тексты после данного количества слов (среди top max_features наиболее используемые слова)\n",
    "maxlen = 80\n",
    "batch_size = 50 # увеличьте значение для ускорения обучения\n",
    "\n",
    "print('Загрузка данных...')\n",
    "(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rnDxxPa1A2vE",
    "outputId": "e4fb2b5c-b7f3-4e85-e1cb-e8032e3dd28e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[218, 189, 141, 550, 147]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[len(i) for i in X_train[:5]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "LRBL0ZDmBIPI",
    "outputId": "e94a4908-0176-417e-f2c4-84f75dbfb7b8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([list([1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]),\n",
       "       list([1, 194, 1153, 194, 8255, 78, 228, 5, 6, 1463, 4369, 5012, 134, 26, 4, 715, 8, 118, 1634, 14, 394, 20, 13, 119, 954, 189, 102, 5, 207, 110, 3103, 21, 14, 69, 188, 8, 30, 23, 7, 4, 249, 126, 93, 4, 114, 9, 2300, 1523, 5, 647, 4, 116, 9, 35, 8163, 4, 229, 9, 340, 1322, 4, 118, 9, 4, 130, 4901, 19, 4, 1002, 5, 89, 29, 952, 46, 37, 4, 455, 9, 45, 43, 38, 1543, 1905, 398, 4, 1649, 26, 6853, 5, 163, 11, 3215, 2, 4, 1153, 9, 194, 775, 7, 8255, 2, 349, 2637, 148, 605, 2, 8003, 15, 123, 125, 68, 2, 6853, 15, 349, 165, 4362, 98, 5, 4, 228, 9, 43, 2, 1157, 15, 299, 120, 5, 120, 174, 11, 220, 175, 136, 50, 9, 4373, 228, 8255, 5, 2, 656, 245, 2350, 5, 4, 9837, 131, 152, 491, 18, 2, 32, 7464, 1212, 14, 9, 6, 371, 78, 22, 625, 64, 1382, 9, 8, 168, 145, 23, 4, 1690, 15, 16, 4, 1355, 5, 28, 6, 52, 154, 462, 33, 89, 78, 285, 16, 145, 95]),\n",
       "       list([1, 14, 47, 8, 30, 31, 7, 4, 249, 108, 7, 4, 5974, 54, 61, 369, 13, 71, 149, 14, 22, 112, 4, 2401, 311, 12, 16, 3711, 33, 75, 43, 1829, 296, 4, 86, 320, 35, 534, 19, 263, 4821, 1301, 4, 1873, 33, 89, 78, 12, 66, 16, 4, 360, 7, 4, 58, 316, 334, 11, 4, 1716, 43, 645, 662, 8, 257, 85, 1200, 42, 1228, 2578, 83, 68, 3912, 15, 36, 165, 1539, 278, 36, 69, 2, 780, 8, 106, 14, 6905, 1338, 18, 6, 22, 12, 215, 28, 610, 40, 6, 87, 326, 23, 2300, 21, 23, 22, 12, 272, 40, 57, 31, 11, 4, 22, 47, 6, 2307, 51, 9, 170, 23, 595, 116, 595, 1352, 13, 191, 79, 638, 89, 2, 14, 9, 8, 106, 607, 624, 35, 534, 6, 227, 7, 129, 113]),\n",
       "       list([1, 4, 2, 2, 33, 2804, 4, 2040, 432, 111, 153, 103, 4, 1494, 13, 70, 131, 67, 11, 61, 2, 744, 35, 3715, 761, 61, 5766, 452, 9214, 4, 985, 7, 2, 59, 166, 4, 105, 216, 1239, 41, 1797, 9, 15, 7, 35, 744, 2413, 31, 8, 4, 687, 23, 4, 2, 7339, 6, 3693, 42, 38, 39, 121, 59, 456, 10, 10, 7, 265, 12, 575, 111, 153, 159, 59, 16, 1447, 21, 25, 586, 482, 39, 4, 96, 59, 716, 12, 4, 172, 65, 9, 579, 11, 6004, 4, 1615, 5, 2, 7, 5168, 17, 13, 7064, 12, 19, 6, 464, 31, 314, 11, 2, 6, 719, 605, 11, 8, 202, 27, 310, 4, 3772, 3501, 8, 2722, 58, 10, 10, 537, 2116, 180, 40, 14, 413, 173, 7, 263, 112, 37, 152, 377, 4, 537, 263, 846, 579, 178, 54, 75, 71, 476, 36, 413, 263, 2504, 182, 5, 17, 75, 2306, 922, 36, 279, 131, 2895, 17, 2867, 42, 17, 35, 921, 2, 192, 5, 1219, 3890, 19, 2, 217, 4122, 1710, 537, 2, 1236, 5, 736, 10, 10, 61, 403, 9, 2, 40, 61, 4494, 5, 27, 4494, 159, 90, 263, 2311, 4319, 309, 8, 178, 5, 82, 4319, 4, 65, 15, 9225, 145, 143, 5122, 12, 7039, 537, 746, 537, 537, 15, 7979, 4, 2, 594, 7, 5168, 94, 9096, 3987, 2, 11, 2, 4, 538, 7, 1795, 246, 2, 9, 2, 11, 635, 14, 9, 51, 408, 12, 94, 318, 1382, 12, 47, 6, 2683, 936, 5, 6307, 2, 19, 49, 7, 4, 1885, 2, 1118, 25, 80, 126, 842, 10, 10, 2, 2, 4726, 27, 4494, 11, 1550, 3633, 159, 27, 341, 29, 2733, 19, 4185, 173, 7, 90, 2, 8, 30, 11, 4, 1784, 86, 1117, 8, 3261, 46, 11, 2, 21, 29, 9, 2841, 23, 4, 1010, 2, 793, 6, 2, 1386, 1830, 10, 10, 246, 50, 9, 6, 2750, 1944, 746, 90, 29, 2, 8, 124, 4, 882, 4, 882, 496, 27, 2, 2213, 537, 121, 127, 1219, 130, 5, 29, 494, 8, 124, 4, 882, 496, 4, 341, 7, 27, 846, 10, 10, 29, 9, 1906, 8, 97, 6, 236, 2, 1311, 8, 4, 2, 7, 31, 7, 2, 91, 2, 3987, 70, 4, 882, 30, 579, 42, 9, 12, 32, 11, 537, 10, 10, 11, 14, 65, 44, 537, 75, 2, 1775, 3353, 2, 1846, 4, 2, 7, 154, 5, 4, 518, 53, 2, 2, 7, 3211, 882, 11, 399, 38, 75, 257, 3807, 19, 2, 17, 29, 456, 4, 65, 7, 27, 205, 113, 10, 10, 2, 4, 2, 2, 9, 242, 4, 91, 1202, 2, 5, 2070, 307, 22, 7, 5168, 126, 93, 40, 2, 13, 188, 1076, 3222, 19, 4, 2, 7, 2348, 537, 23, 53, 537, 21, 82, 40, 2, 13, 2, 14, 280, 13, 219, 4, 2, 431, 758, 859, 4, 953, 1052, 2, 7, 5991, 5, 94, 40, 25, 238, 60, 2, 4, 2, 804, 2, 7, 4, 9941, 132, 8, 67, 6, 22, 15, 9, 283, 8, 5168, 14, 31, 9, 242, 955, 48, 25, 279, 2, 23, 12, 1685, 195, 25, 238, 60, 796, 2, 4, 671, 7, 2804, 5, 4, 559, 154, 888, 7, 726, 50, 26, 49, 7008, 15, 566, 30, 579, 21, 64, 2574]),\n",
       "       list([1, 249, 1323, 7, 61, 113, 10, 10, 13, 1637, 14, 20, 56, 33, 2401, 18, 457, 88, 13, 2626, 1400, 45, 3171, 13, 70, 79, 49, 706, 919, 13, 16, 355, 340, 355, 1696, 96, 143, 4, 22, 32, 289, 7, 61, 369, 71, 2359, 5, 13, 16, 131, 2073, 249, 114, 249, 229, 249, 20, 13, 28, 126, 110, 13, 473, 8, 569, 61, 419, 56, 429, 6, 1513, 18, 35, 534, 95, 474, 570, 5, 25, 124, 138, 88, 12, 421, 1543, 52, 725, 6397, 61, 419, 11, 13, 1571, 15, 1543, 20, 11, 4, 2, 5, 296, 12, 3524, 5, 15, 421, 128, 74, 233, 334, 207, 126, 224, 12, 562, 298, 2167, 1272, 7, 2601, 5, 516, 988, 43, 8, 79, 120, 15, 595, 13, 784, 25, 3171, 18, 165, 170, 143, 19, 14, 5, 7224, 6, 226, 251, 7, 61, 113])],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PmA2R0lPn0z7",
    "outputId": "0f7386ff-38f8-4efd-9b08-f1d2b78fa809"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n",
      "1641221/1641221 [==============================] - 3s 2us/step\n",
      "the as you with out themselves powerful lets loves their becomes reaching had journalist of lot from anyone to have after out atmosphere never more room and it so heart shows to years of every never going and help moments or of every chest visual movie except her was several of enough more with is now current film as you of mine potentially unfortunately of you than him that with out themselves her get for was camp of you movie sometimes movie that with scary but and to story wonderful that in seeing in character to of 70s musicians with heart had shadows they of here that with her serious to have does when from why what have critics they is you that isn't one will very to as itself with other and in of seen over landed for anyone of and br show's to whether from than out themselves history he name half some br of and odd was two most of mean for 1 any an boat she he should is thought frog but of script you not while history he heart to real at barrel but when from one bit then have two of script their with her nobody most that with wasn't to with armed acting watch an for with heartfelt film want an "
     ]
    }
   ],
   "source": [
    "index2word = {v:k for k, v in imdb.get_word_index().items()}\n",
    "\n",
    "for idx_word in X_train[0]:\n",
    "    print(index2word[idx_word], end=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "E6Nex90C6XPR",
    "outputId": "7f54c28a-9643-4233-8d6f-7ce5925eb11b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pad последовательности (примеров в x единицу времени)\n",
      "X_train shape: (25000, 80)\n",
      "X_test shape: (25000, 80)\n"
     ]
    }
   ],
   "source": [
    "print('Pad последовательности (примеров в x единицу времени)')\n",
    "X_train = sequence.pad_sequences(X_train, maxlen=maxlen)\n",
    "X_test = sequence.pad_sequences(X_test, maxlen=maxlen)\n",
    "print('X_train shape:', X_train.shape)\n",
    "print('X_test shape:', X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UD8mp-DbDOf1",
    "outputId": "1729d29d-36f1-4566-c62a-2e24c4b16d37"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  15,  256,    4,    2,    7, 3766,    5,  723,   36,   71,   43,\n",
       "        530,  476,   26,  400,  317,   46,    7,    4,    2, 1029,   13,\n",
       "        104,   88,    4,  381,   15,  297,   98,   32, 2071,   56,   26,\n",
       "        141,    6,  194, 7486,   18,    4,  226,   22,   21,  134,  476,\n",
       "         26,  480,    5,  144,   30, 5535,   18,   51,   36,   28,  224,\n",
       "         92,   25,  104,    4,  226,   65,   16,   38, 1334,   88,   12,\n",
       "         16,  283,    5,   16, 4472,  113,  103,   32,   15,   16, 5345,\n",
       "         19,  178,   32], dtype=int32)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "v0WLajSLEDOb",
    "outputId": "d20199ad-31e0-444d-de4c-eb137598725f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,\n",
       "          0,    1,  591,  202,   14,   31,    6,  717,   10,   10,    2,\n",
       "          2,    5,    4,  360,    7,    4,  177, 5760,  394,  354,    4,\n",
       "        123,    9, 1035, 1035, 1035,   10,   10,   13,   92,  124,   89,\n",
       "        488, 7944,  100,   28, 1668,   14,   31,   23,   27, 7479,   29,\n",
       "        220,  468,    8,  124,   14,  286,  170,    8,  157,   46,    5,\n",
       "         27,  239,   16,  179,    2,   38,   32,   25, 7944,  451,  202,\n",
       "         14,    6,  717], dtype=int32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "uYx53_0gD_ii",
    "outputId": "7b461078-3d58-455d-fea1-55f3abba4146"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "88584"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = imdb.get_word_index()\n",
    "len(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_sKgJlmOEaYo",
    "outputId": "4b22b6f5-5b55-4a21-a0dd-bb12c7b58ce4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9999"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.max(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "C6QQVTyYGDSu",
    "outputId": "4a257328-630f-4aee-bc4e-30152c869940"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dK9nZwfEHkZ7"
   },
   "source": [
    "\"Мешок слов\" - Bag of Word (BoW) \n",
    "\n",
    "http://lab314.brsu.by/kmp-lite/kmp2/JOB/CModel/BoW-Q.htm\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gEkWIp-j7YmM",
    "outputId": "730fc58c-83f7-4241-a3b4-40428832b889"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  15,  256,    4,    2,    7, 3766,    5,  723,   36,   71,   43,\n",
       "        530,  476,   26,  400,  317,   46,    7,    4,    2, 1029,   13,\n",
       "        104,   88,    4,  381,   15,  297,   98,   32, 2071,   56,   26,\n",
       "        141,    6,  194, 7486,   18,    4,  226,   22,   21,  134,  476,\n",
       "         26,  480,    5,  144,   30, 5535,   18,   51,   36,   28,  224,\n",
       "         92,   25,  104,    4,  226,   65,   16,   38, 1334,   88,   12,\n",
       "         16,  283,    5,   16, 4472,  113,  103,   32,   15,   16, 5345,\n",
       "         19,  178,   32], dtype=int32)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "id": "MAEpc8VBDpa9"
   },
   "outputs": [],
   "source": [
    "def vectorize(sequences, dimension=10000):\n",
    "    results = np.zeros((len(sequences), dimension))\n",
    "    for i, sequence in enumerate(sequences):\n",
    "        results[i, sequence] = 1\n",
    "    return results\n",
    " \n",
    "X_train_bow = vectorize(X_train, dimension=max_features)\n",
    "X_test_bow = vectorize(X_test, dimension=max_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Rc3N_e9Bk3_7",
    "outputId": "c39020f7-07da-4526-f3a4-64cb7876583e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25000, 10000)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_bow.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3WvBYi2V7sFi",
    "outputId": "a296008b-f43c-4832-cd7b-b119608004aa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 1., 0., 1., 1., 1., 1., 0., 0.])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_bow[0, :10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dGP_LHw5Ialo",
    "outputId": "0a87de7e-d520-426d-8ab5-c190ea13026c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Построение модели...\n",
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " dense_2 (Dense)             (None, 128)               1280128   \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,280,257\n",
      "Trainable params: 1,280,257\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "print('Построение модели...')\n",
    "model_bow = Sequential()\n",
    "\n",
    "model_bow.add(Dense(128, activation='relu', input_shape=(max_features, )))\n",
    "model_bow.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# стоит попробовать использовать другие оптимизаторы и другие конфигурации\n",
    "model_bow.compile(loss='binary_crossentropy',\n",
    "                  optimizer='adam',\n",
    "                  metrics=['accuracy'])\n",
    "model_bow.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "fy0kwNGFIsU-",
    "outputId": "282b21cf-cedd-4387-b5db-667cd87a9153"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Процесс обучения...\n",
      "Epoch 1/3\n",
      "500/500 [==============================] - 11s 22ms/step - loss: 0.4024 - accuracy: 0.8156 - val_loss: 0.3647 - val_accuracy: 0.8376\n",
      "Epoch 2/3\n",
      "500/500 [==============================] - 7s 14ms/step - loss: 0.2543 - accuracy: 0.8963 - val_loss: 0.3952 - val_accuracy: 0.8255\n",
      "Epoch 3/3\n",
      "500/500 [==============================] - 8s 17ms/step - loss: 0.1700 - accuracy: 0.9343 - val_loss: 0.4773 - val_accuracy: 0.8205\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fa3e2fe3220>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Процесс обучения...')\n",
    "model_bow.fit(X_train_bow[:], y_train[:],\n",
    "              batch_size=batch_size,\n",
    "              epochs=3,\n",
    "              validation_data=(X_test_bow, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "F2mSR1hKE8kP",
    "outputId": "c880eeaa-585c-48b9-e188-5b43802d3cbf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Валидация модели\n",
      "500/500 [==============================] - 1s 2ms/step - loss: 0.4773 - accuracy: 0.8205\n"
     ]
    }
   ],
   "source": [
    "print('Валидация модели')\n",
    "score, acc = model_bow.evaluate(X_test_bow, y_test, batch_size=batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oTfbQ6OBRp1l"
   },
   "source": [
    "Обучение на последовательности"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "id": "GstuABaVM0tv"
   },
   "outputs": [],
   "source": [
    "def vectorize_seq(sequences, xLen=100):\n",
    "    results = np.zeros((len(sequences), xLen, 1))\n",
    "    for i, sequence in enumerate(sequences):\n",
    "        for j in range(xLen):\n",
    "            results[i, j,:] = sequence[j]\n",
    "    return results\n",
    " \n",
    "X_train_seq = vectorize_seq(X_train, xLen=maxlen)\n",
    "X_test_seq = vectorize_seq(X_test, xLen=maxlen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "SsmzCJY8Odhx",
    "outputId": "e672b7d2-5e8c-45a3-a3ea-c65f8c67d3f2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((25000, 80), (25000, 80, 1))"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape, X_test_seq.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 225
    },
    "id": "C294q3_rGSQa",
    "outputId": "8fd2e906-c2bd-47ce-e629-0bcc5877a626"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  15,  256,    4,    2,    7, 3766,    5,  723,   36,   71],\n",
       "      dtype=int32)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([[1.500e+01],\n",
       "       [2.560e+02],\n",
       "       [4.000e+00],\n",
       "       [2.000e+00],\n",
       "       [7.000e+00],\n",
       "       [3.766e+03],\n",
       "       [5.000e+00],\n",
       "       [7.230e+02],\n",
       "       [3.600e+01],\n",
       "       [7.100e+01]])"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(X_train[0, :10], X_train_seq[0, :10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-5WgurStDH7r",
    "outputId": "f393c99a-20b0-4f06-a69e-071861ccd3da"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Построение модели...\n",
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_1 (LSTM)               (None, 128)               66560     \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 66,689\n",
      "Trainable params: 66,689\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "print('Построение модели...')\n",
    "model = Sequential()\n",
    "model.add(LSTM(128, input_shape=(maxlen, 1)))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "# стоит попробовать использовать другие оптимизаторы и другие конфигурации\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "RB_jXARMPB09",
    "outputId": "c31c06a5-060f-4045-e7e3-e1c1bda2638c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Процесс обучения...\n",
      "Epoch 1/5\n",
      "25/25 [==============================] - 11s 410ms/step - loss: 0.6916 - accuracy: 0.5235 - val_loss: 0.6893 - val_accuracy: 0.5372\n",
      "Epoch 2/5\n",
      "25/25 [==============================] - 11s 463ms/step - loss: 0.6868 - accuracy: 0.5474 - val_loss: 0.6857 - val_accuracy: 0.5517\n",
      "Epoch 3/5\n",
      "25/25 [==============================] - 12s 468ms/step - loss: 0.6842 - accuracy: 0.5545 - val_loss: 0.6840 - val_accuracy: 0.5545\n",
      "Epoch 4/5\n",
      "25/25 [==============================] - 12s 487ms/step - loss: 0.6834 - accuracy: 0.5582 - val_loss: 0.6836 - val_accuracy: 0.5583\n",
      "Epoch 5/5\n",
      "25/25 [==============================] - 16s 664ms/step - loss: 0.6827 - accuracy: 0.5580 - val_loss: 0.6830 - val_accuracy: 0.5595\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fa3dd0d9970>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Процесс обучения...')\n",
    "model.fit(X_train_seq, y_train,\n",
    "          batch_size=1000,\n",
    "          epochs=5,\n",
    "          validation_data=(X_test_seq, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ZWi9KWCIR_pp",
    "outputId": "118434f8-1653-4276-eff9-17c56e385696"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Валидация модели\n",
      "500/500 [==============================] - 10s 19ms/step - loss: 0.6830 - accuracy: 0.5595\n"
     ]
    }
   ],
   "source": [
    "print('Валидация модели')\n",
    "score, acc = model.evaluate(X_test_seq, y_test, batch_size=batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ywmxlc13SNsa"
   },
   "source": [
    "Сеть обучилась не очень хорошо, можно сделать её посложнее или просто пообучать подольше, но на самом деле так не делают, передавать индексы слов не самая лучшая затея. Это решается по-другому, с помощью **эмбеддингов**.\n",
    "\n",
    "Эмбэддинг - векторное представление слов.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=13DNqtvToTyJritI3oRbyanrnTo1I-H60'>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "v9XNCUefmPAK"
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(Embedding(max_features, 128))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_-clQfu2mP9e",
    "outputId": "ed75a6e2-d8b0-4af3-8d60-2918d11cbe0f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 45ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[[ 0.03084402, -0.02923005,  0.01958931, ..., -0.0111959 ,\n",
       "         -0.01515236, -0.01610003],\n",
       "        [-0.03976443,  0.01954884,  0.0044529 , ..., -0.03516059,\n",
       "         -0.04934659,  0.02690709],\n",
       "        [-0.00300004,  0.00601351,  0.02484885, ...,  0.0239521 ,\n",
       "          0.04711017,  0.00836216],\n",
       "        ...,\n",
       "        [ 0.03355033,  0.01956761, -0.00716171, ...,  0.01920488,\n",
       "         -0.03726907, -0.03473692],\n",
       "        [-0.00959028, -0.02050831,  0.01771015, ...,  0.04738423,\n",
       "          0.04905454, -0.00093564],\n",
       "        [ 0.03714614, -0.03321441,  0.03173432, ...,  0.00090315,\n",
       "         -0.02098147,  0.0337116 ]]], dtype=float32)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(X_train[:1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zEkujpzjmVo2",
    "outputId": "7ca2a194-3dcc-44d1-93bb-d33eafcaed42"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 23ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(1, 80, 128)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(X_train[:1]).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "R22U-vONRiX9",
    "outputId": "e751227f-d2d1-4e65-acb3-0fbe0827bdca"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Построение модели...\n",
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_1 (Embedding)     (None, None, 128)         1280000   \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, None, 128)         0         \n",
      "                                                                 \n",
      " lstm_2 (LSTM)               (None, 128)               131584    \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 1)                 129       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 1,411,713\n",
      "Trainable params: 1,411,713\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "print('Построение модели...')\n",
    "model = Sequential()\n",
    "model.add(Embedding(max_features, 128))\n",
    "model.add(Dropout(0.3))\n",
    "model.add(LSTM(128, dropout=0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "g6GFt6iHDK71",
    "outputId": "85efad1b-7690-44db-ec50-e74483738942"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Процесс обучения...\n",
      "Epoch 1/3\n",
      "196/196 [==============================] - 45s 219ms/step - loss: 0.4614 - accuracy: 0.7736 - val_loss: 0.3783 - val_accuracy: 0.8396\n",
      "Epoch 2/3\n",
      "196/196 [==============================] - 39s 199ms/step - loss: 0.2994 - accuracy: 0.8763 - val_loss: 0.3628 - val_accuracy: 0.8391\n",
      "Epoch 3/3\n",
      "196/196 [==============================] - 41s 211ms/step - loss: 0.2394 - accuracy: 0.9039 - val_loss: 0.4224 - val_accuracy: 0.8332\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7fa3e741d850>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Процесс обучения...')\n",
    "model.fit(X_train, y_train,\n",
    "          batch_size=128,\n",
    "          epochs=3,\n",
    "          validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hdKjQavlS_gO",
    "outputId": "ce4106d2-68a2-4884-894a-5b36e3afd2b9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Валидация модели\n",
      "500/500 [==============================] - 12s 23ms/step - loss: 0.4224 - accuracy: 0.8332\n"
     ]
    }
   ],
   "source": [
    "print('Валидация модели')\n",
    "score, acc = model.evaluate(X_test, y_test, batch_size=batch_size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EAwCogDbAs7S"
   },
   "source": [
    "### Временной ряд"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "q0_pkjh10ZDv"
   },
   "source": [
    "Давайте посмотрим пример, в котором будут использоваться временные ряды. Читаем данные из файла со значениями цены нефти марки BRENT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "id": "1a14WfZxn4tN"
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.layers import Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "j0uTBfc9E1p6",
    "outputId": "acd736af-9838-4f3b-8574-2943573e3596"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2023-02-06 16:43:39--  https://drive.google.com/uc?export=download&id=1LyP8K5557iKZPLFG2nsh-GC2v9y-nJCf\n",
      "Resolving drive.google.com (drive.google.com)... 2a00:1450:4010:c08::c2, 142.250.150.194\n",
      "Connecting to drive.google.com (drive.google.com)|2a00:1450:4010:c08::c2|:443... connected.\n",
      "HTTP request sent, awaiting response... 303 See Other\n",
      "Location: https://doc-0s-c0-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/icta5dghi8el31gc7d04naj7vckukmtt/1675690950000/14904333240138417226/*/1LyP8K5557iKZPLFG2nsh-GC2v9y-nJCf?e=download&uuid=74242b77-812b-4132-a02b-a91fa8403513 [following]\n",
      "Warning: wildcards not supported in HTTP.\n",
      "--2023-02-06 16:43:40--  https://doc-0s-c0-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/icta5dghi8el31gc7d04naj7vckukmtt/1675690950000/14904333240138417226/*/1LyP8K5557iKZPLFG2nsh-GC2v9y-nJCf?e=download&uuid=74242b77-812b-4132-a02b-a91fa8403513\n",
      "Resolving doc-0s-c0-docs.googleusercontent.com (doc-0s-c0-docs.googleusercontent.com)... 2a00:1450:4010:c0e::84, 64.233.165.132\n",
      "Connecting to doc-0s-c0-docs.googleusercontent.com (doc-0s-c0-docs.googleusercontent.com)|2a00:1450:4010:c0e::84|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 119422 (117K) [text/csv]\n",
      "Saving to: 'BRENT2019.csv'\n",
      "\n",
      "BRENT2019.csv       100%[===================>] 116.62K   650KB/s    in 0.2s    \n",
      "\n",
      "2023-02-06 16:43:41 (650 KB/s) - 'BRENT2019.csv' saved [119422/119422]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget 'https://drive.google.com/uc?export=download&id=1LyP8K5557iKZPLFG2nsh-GC2v9y-nJCf' -O BRENT2019.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_BAalCFs0eY7",
    "outputId": "2616f243-55bc-4960-c3d2-3a82019f6e3d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BRENT2019.csv\r\n",
      "Web5_LMV.ipynb\r\n",
      "airline-passengers.csv\r\n",
      "airplane.py\r\n",
      "alice_in_wonderland.txt\r\n",
      "metodich5.ipynb\r\n",
      "web5.html\r\n",
      "webinar_5.mp4\r\n",
      "Урок 5. Методичка (1).pdf\r\n",
      "Урок 5. Методичка.pdf\r\n",
      "Урок 5. Презентация (1).pdf\r\n",
      "Урок 5. Презентация.pdf\r\n",
      "Разбор_ДЗ_web5.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "Tq912y310niv",
    "outputId": "c877c11d-217b-45b3-b9fa-b859f2c5ca59"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Дата</th>\n",
       "      <th>Значение</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>dayofmonth</th>\n",
       "      <th>quarter</th>\n",
       "      <th>dayofyear</th>\n",
       "      <th>weekofyear</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>is_holiday</th>\n",
       "      <th>is_prev_holiday</th>\n",
       "      <th>is_next_holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2010-09-01</td>\n",
       "      <td>76.37</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>244</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2010-09-02</td>\n",
       "      <td>76.89</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>245</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2010-09-03</td>\n",
       "      <td>76.57</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>246</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2010-09-04</td>\n",
       "      <td>76.62</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>247</td>\n",
       "      <td>35</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2010-09-05</td>\n",
       "      <td>76.63</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>248</td>\n",
       "      <td>35</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Дата  Значение  year  month  dayofmonth  quarter  dayofyear  \\\n",
       "0  2010-09-01     76.37  2010      9           1        3        244   \n",
       "1  2010-09-02     76.89  2010      9           2        3        245   \n",
       "2  2010-09-03     76.57  2010      9           3        3        246   \n",
       "3  2010-09-04     76.62  2010      9           4        3        247   \n",
       "4  2010-09-05     76.63  2010      9           5        3        248   \n",
       "\n",
       "   weekofyear  dayofweek  is_holiday  is_prev_holiday  is_next_holiday  \n",
       "0          35          2           0                0                0  \n",
       "1          35          3           0                0                0  \n",
       "2          35          4           0                0                0  \n",
       "3          35          5           0                0                0  \n",
       "4          35          6           0                1                0  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('BRENT2019.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YzldyB8Z1WdG",
    "outputId": "5c31427d-61d4-40e4-f2e7-734a94b70023"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2667, 12)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WPf7IJSK0wak"
   },
   "source": [
    "Отбросим первый столбец, т.к. признаки [year,\tmonth,\tdayofmonth,\tquarter,\tdayofyear,\tweekofyear,\tdayofweek,\tis_holiday,\tis_prev_holiday,\tis_next_holiday] его представляют."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "1xz-ULQA0nej",
    "outputId": "e7a26141-fd0b-4566-bdbc-95e726c926e3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Значение</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>dayofmonth</th>\n",
       "      <th>quarter</th>\n",
       "      <th>dayofyear</th>\n",
       "      <th>weekofyear</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>is_holiday</th>\n",
       "      <th>is_prev_holiday</th>\n",
       "      <th>is_next_holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>76.37</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>244</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76.89</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>245</td>\n",
       "      <td>35</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76.57</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>246</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>76.62</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>247</td>\n",
       "      <td>35</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.63</td>\n",
       "      <td>2010</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>248</td>\n",
       "      <td>35</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Значение  year  month  dayofmonth  quarter  dayofyear  weekofyear  \\\n",
       "0     76.37  2010      9           1        3        244          35   \n",
       "1     76.89  2010      9           2        3        245          35   \n",
       "2     76.57  2010      9           3        3        246          35   \n",
       "3     76.62  2010      9           4        3        247          35   \n",
       "4     76.63  2010      9           5        3        248          35   \n",
       "\n",
       "   dayofweek  is_holiday  is_prev_holiday  is_next_holiday  \n",
       "0          2           0                0                0  \n",
       "1          3           0                0                0  \n",
       "2          4           0                0                0  \n",
       "3          5           0                0                0  \n",
       "4          6           0                1                0  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = df.iloc[:, 1:]\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Swf4ctRx1QHa"
   },
   "source": [
    "Разбиваем выборку на обучение и на тест."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6FphmtOu1TS3",
    "outputId": "dbd35fe6-ecfa-4c51-a2d6-634d68afe8b5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2000, 11), (657, 11))"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_size = 2000\n",
    "\n",
    "\n",
    "# список признаков, по которым будем учить\n",
    "features = ['Значение', 'year', 'month', \n",
    "            'dayofmonth',\n",
    "            'quarter', 'dayofyear', 'weekofyear', 'dayofweek',\n",
    "            'is_holiday', 'is_prev_holiday', 'is_next_holiday'\n",
    "            ]\n",
    "\n",
    "\n",
    "# отступ теста от тренировки\n",
    "bias = 10\n",
    "\n",
    "\n",
    "# делим\n",
    "train_data = data.iloc[:train_size][features]\n",
    "val_data = data.iloc[train_size: + bias][features]\n",
    "\n",
    "train_data.shape, val_data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pwOCwCuu1O7R"
   },
   "source": [
    "Создаем данные для обучения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "id": "bV29ZVEI3bNs"
   },
   "outputs": [],
   "source": [
    "features = train_data.columns[1:]\n",
    "target = train_data.columns[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "YKuo-KbW0naa",
    "outputId": "6b8dede9-7588-4102-fd35-c4bf8934d767"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Значение</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>dayofmonth</th>\n",
       "      <th>quarter</th>\n",
       "      <th>dayofyear</th>\n",
       "      <th>weekofyear</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>is_holiday</th>\n",
       "      <th>is_prev_holiday</th>\n",
       "      <th>is_next_holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>76.37</td>\n",
       "      <td>-1.745239</td>\n",
       "      <td>0.722603</td>\n",
       "      <td>-1.671876</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.583075</td>\n",
       "      <td>0.570751</td>\n",
       "      <td>-0.263439</td>\n",
       "      <td>-0.172818</td>\n",
       "      <td>-0.164989</td>\n",
       "      <td>-0.175863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76.89</td>\n",
       "      <td>-1.745239</td>\n",
       "      <td>0.722603</td>\n",
       "      <td>-1.558131</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.592515</td>\n",
       "      <td>0.570751</td>\n",
       "      <td>0.272007</td>\n",
       "      <td>-0.172818</td>\n",
       "      <td>-0.164989</td>\n",
       "      <td>-0.175863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>76.57</td>\n",
       "      <td>-1.745239</td>\n",
       "      <td>0.722603</td>\n",
       "      <td>-1.444387</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.601956</td>\n",
       "      <td>0.570751</td>\n",
       "      <td>0.807453</td>\n",
       "      <td>-0.172818</td>\n",
       "      <td>-0.164989</td>\n",
       "      <td>-0.175863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>76.62</td>\n",
       "      <td>-1.745239</td>\n",
       "      <td>0.722603</td>\n",
       "      <td>-1.330642</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.611396</td>\n",
       "      <td>0.570751</td>\n",
       "      <td>1.342899</td>\n",
       "      <td>-0.172818</td>\n",
       "      <td>-0.164989</td>\n",
       "      <td>-0.175863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76.63</td>\n",
       "      <td>-1.745239</td>\n",
       "      <td>0.722603</td>\n",
       "      <td>-1.216897</td>\n",
       "      <td>0.452662</td>\n",
       "      <td>0.620837</td>\n",
       "      <td>0.570751</td>\n",
       "      <td>1.878345</td>\n",
       "      <td>-0.172818</td>\n",
       "      <td>6.061011</td>\n",
       "      <td>-0.175863</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Значение      year     month  dayofmonth   quarter  dayofyear  weekofyear  \\\n",
       "0     76.37 -1.745239  0.722603   -1.671876  0.452662   0.583075    0.570751   \n",
       "1     76.89 -1.745239  0.722603   -1.558131  0.452662   0.592515    0.570751   \n",
       "2     76.57 -1.745239  0.722603   -1.444387  0.452662   0.601956    0.570751   \n",
       "3     76.62 -1.745239  0.722603   -1.330642  0.452662   0.611396    0.570751   \n",
       "4     76.63 -1.745239  0.722603   -1.216897  0.452662   0.620837    0.570751   \n",
       "\n",
       "   dayofweek  is_holiday  is_prev_holiday  is_next_holiday  \n",
       "0  -0.263439   -0.172818        -0.164989        -0.175863  \n",
       "1   0.272007   -0.172818        -0.164989        -0.175863  \n",
       "2   0.807453   -0.172818        -0.164989        -0.175863  \n",
       "3   1.342899   -0.172818        -0.164989        -0.175863  \n",
       "4   1.878345   -0.172818         6.061011        -0.175863  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "\n",
    "train_data[features] = scaler.fit_transform(train_data[features])\n",
    "val_data[features] = scaler.transform(val_data[features])\n",
    "\n",
    "train_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fVy67FYq3M8A"
   },
   "source": [
    "Формируем параметры для генерации выборки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "iBna7eOq3EtQ"
   },
   "outputs": [],
   "source": [
    "# длина истории\n",
    "x_len = 7\n",
    "\n",
    "# горизонт предсказания\n",
    "future = 1\n",
    "\n",
    "# параметры модели для обучения\n",
    "learning_rate = 0.001\n",
    "batch_size = 32\n",
    "epochs = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "u5ayHrMs3jjh",
    "outputId": "127db9d4-ad00-4be9-8429-d1fa1fb56ee4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8 2008\n",
      "649 2018\n"
     ]
    }
   ],
   "source": [
    "start = x_len + future\n",
    "end = start + train_size\n",
    "\n",
    "print(start, end)\n",
    "\n",
    "X_train = train_data[features].values\n",
    "y_train = data.iloc[start:end][target].values\n",
    "\n",
    "\n",
    "x_end = len(val_data) - x_len - future\n",
    "label_start = len(train_data) + bias + x_len + future\n",
    "print(x_end, label_start)\n",
    "\n",
    "X_val = val_data.iloc[:x_end][features].values\n",
    "y_val = data.iloc[label_start:][target].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OSGd4jrX4htT",
    "outputId": "2ceac6b4-61c1-4984-d25c-6597bc60e832"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2000, 10), (2000,), (649, 10), (649,))"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, y_train.shape, X_val.shape, y_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 350
    },
    "id": "S7HedvU350TW",
    "outputId": "75640e14-aeea-4cfd-a0bb-dea78196a2e0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(data.index[x_len:y_train.shape[0]+x_len],y_train[:])\n",
    "plt.plot(data.index[y_train.shape[0]+x_len+bias+future:],y_val[:])\n",
    "plt.grid('on')\n",
    "plt.xlabel('t, дни')\n",
    "plt.ylabel('$')\n",
    "plt.title('стоимость BRENT в 2015-2018')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "5e__Gvgo50Jj"
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.preprocessing import timeseries_dataset_from_array\n",
    "\n",
    "dataset_train = timeseries_dataset_from_array(\n",
    "    X_train,\n",
    "    y_train,\n",
    "    sequence_length=x_len,\n",
    "    sampling_rate=1,\n",
    "    batch_size=batch_size,\n",
    ")\n",
    "\n",
    "dataset_val = timeseries_dataset_from_array(\n",
    "    X_val,\n",
    "    y_val,\n",
    "    sequence_length=x_len,\n",
    "    sampling_rate=1,\n",
    "    batch_size=batch_size,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Aglum2UP50Fn",
    "outputId": "0b4f8e65-0864-4758-d278-b5a70b546636"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input shape: (32, 7, 10)\n",
      "tf.Tensor(\n",
      "[[-1.7452388   0.72260267 -1.55813134  0.45266166  0.5925154   0.5707507\n",
      "   0.27200661 -0.17281816 -0.16498899 -0.17586311]\n",
      " [-1.7452388   0.72260267 -1.44438667  0.45266166  0.60195592  0.5707507\n",
      "   0.80745269 -0.17281816 -0.16498899 -0.17586311]\n",
      " [-1.7452388   0.72260267 -1.330642    0.45266166  0.61139644  0.5707507\n",
      "   1.34289878 -0.17281816 -0.16498899 -0.17586311]\n",
      " [-1.7452388   0.72260267 -1.21689733  0.45266166  0.62083696  0.5707507\n",
      "   1.87834486 -0.17281816  6.06101056 -0.17586311]\n",
      " [-1.7452388   0.72260267 -1.10315266  0.45266166  0.63027748  0.63692085\n",
      "  -1.33433164  5.78642883 -0.16498899 -0.17586311]\n",
      " [-1.7452388   0.72260267 -0.989408    0.45266166  0.63971801  0.63692085\n",
      "  -0.79888556 -0.17281816 -0.16498899  5.6862407 ]\n",
      " [-1.7452388   0.72260267 -0.87566333  0.45266166  0.64915853  0.63692085\n",
      "  -0.26343947 -0.17281816 -0.16498899 -0.17586311]], shape=(7, 10), dtype=float64)\n",
      "Target shape: (32,)\n",
      "tf.Tensor(78.41, shape=(), dtype=float64)\n"
     ]
    }
   ],
   "source": [
    "for batch in dataset_train:\n",
    "    inputs, targets = batch\n",
    "    print(\"Input shape:\", inputs.shape)\n",
    "    print(inputs[1])\n",
    "    print(\"Target shape:\", targets.shape)\n",
    "    print(targets[1])\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7EXWdamM6vVb"
   },
   "source": [
    "**сеть:  LSTM слои + Conv1D + Dense слой**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zhuaijth6REN",
    "outputId": "6fd095c1-abcd-4824-e212-5e97c6c00871"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_5\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " lstm_3 (LSTM)               (None, 7, 32)             5504      \n",
      "                                                                 \n",
      " lstm_4 (LSTM)               (None, 7, 32)             8320      \n",
      "                                                                 \n",
      " conv1d (Conv1D)             (None, 5, 64)             6208      \n",
      "                                                                 \n",
      " conv1d_1 (Conv1D)           (None, 5, 64)             4160      \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 320)               0         \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 3)                 963       \n",
      "                                                                 \n",
      " dense_7 (Dense)             (None, 1)                 4         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 25,159\n",
      "Trainable params: 25,159\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.callbacks import EarlyStopping\n",
    "from keras.layers import Conv1D\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_mae', patience=5)\n",
    "\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(32, input_shape=(inputs.shape[1], inputs.shape[2]),\n",
    "               return_sequences=True))\n",
    "model.add(LSTM(32, return_sequences=True))\n",
    "model.add(Conv1D(64, 3, activation='linear'))\n",
    "model.add(Conv1D(64, 1, activation='linear'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(3, activation='linear'))\n",
    "model.add(Dense(1, activation='linear'))\n",
    "\n",
    "\n",
    "model.compile(loss='mse', optimizer='adam', metrics=['mae'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "VoStz-Z66RAi",
    "outputId": "64a3eea4-297c-4d1a-86d6-9e93b3fdb9d6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "63/63 [==============================] - 5s 16ms/step - loss: 6965.1714 - mae: 73.8382 - val_loss: 2048.0906 - val_mae: 38.9679\n",
      "Epoch 2/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 1527.6216 - mae: 30.1327 - val_loss: 2179.8201 - val_mae: 44.9830\n",
      "Epoch 3/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 421.1637 - mae: 16.2908 - val_loss: 2348.5518 - val_mae: 46.8470\n",
      "Epoch 4/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 344.1961 - mae: 14.9324 - val_loss: 2233.6140 - val_mae: 45.8619\n",
      "Epoch 5/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 327.3392 - mae: 14.6891 - val_loss: 2085.7288 - val_mae: 44.4104\n",
      "Epoch 6/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 320.0305 - mae: 14.6265 - val_loss: 1939.2255 - val_mae: 42.8735\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(dataset_train,\n",
    "                    epochs=epochs,\n",
    "                    validation_data=dataset_val,\n",
    "                    callbacks=[early_stop])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 265
    },
    "id": "npS0O4Od6Q9C",
    "outputId": "ab9f45d3-8544-4214-9d56-7162eec544d1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['mae'][:], \n",
    "         label='MAE на обучающем наборе')\n",
    "plt.plot(history.history['val_mae'][:], \n",
    "         label='MAE на проверочном наборе')\n",
    "\n",
    "plt.ylabel('Средняя ошибка')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "id": "TpJFVrCy7grh"
   },
   "outputs": [],
   "source": [
    "hist_val = history.history['val_mae']\n",
    "hist_train = history.history['mae']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 612
    },
    "id": "MYbgEbIa7gm9",
    "outputId": "56a9b763-be68-4109-cf66-cd44d7d428c2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 322.7760 - mae: 14.7753 - val_loss: 1799.2168 - val_mae: 41.3212\n",
      "Epoch 2/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 337.0729 - mae: 15.1423 - val_loss: 1665.1079 - val_mae: 39.7569\n",
      "Epoch 3/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 363.3328 - mae: 15.6865 - val_loss: 1536.6228 - val_mae: 38.1832\n",
      "Epoch 4/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 400.4000 - mae: 16.3529 - val_loss: 1411.9321 - val_mae: 36.5793\n",
      "Epoch 5/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 446.4922 - mae: 17.1185 - val_loss: 1285.0236 - val_mae: 34.8582\n",
      "Epoch 6/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 501.8636 - mae: 17.9733 - val_loss: 1147.0492 - val_mae: 32.8675\n",
      "Epoch 7/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 568.8922 - mae: 18.9506 - val_loss: 991.8028 - val_mae: 30.4496\n",
      "Epoch 8/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 647.1178 - mae: 20.0437 - val_loss: 822.0591 - val_mae: 27.5395\n",
      "Epoch 9/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 723.1588 - mae: 20.9070 - val_loss: 653.9271 - val_mae: 24.2990\n",
      "Epoch 10/10\n",
      "63/63 [==============================] - 0s 7ms/step - loss: 760.6959 - mae: 20.7851 - val_loss: 511.0938 - val_mae: 21.1547\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "history = model.fit(dataset_train,\n",
    "                    epochs=epochs,\n",
    "                    validation_data=dataset_val,\n",
    "                    callbacks=[early_stop])\n",
    "\n",
    "hist_val.extend(history.history['val_mae'][:])\n",
    "hist_train.extend(history.history['mae'][:])\n",
    "\n",
    "\n",
    "plt.plot(hist_train, \n",
    "         label='MAE на обучающем наборе')\n",
    "plt.plot(hist_val, \n",
    "         label='MAE на проверочном наборе')\n",
    "\n",
    "plt.ylabel('Средняя ошибка')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sTVYH8bynCXK"
   },
   "source": [
    "Проверяем результаты:\n",
    "\n",
    "- строим предсказание\n",
    "- рисуем прогноз для тестовой части \n",
    "- рисуем прогноз по тренировочной части"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wuKT4O2WjZiQ",
    "outputId": "4e61e6e0-1878-4872-a6bb-ebbbd0ef6c3a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "63/63 [==============================] - 1s 3ms/step\n",
      "21/21 [==============================] - 0s 3ms/step\n"
     ]
    }
   ],
   "source": [
    "pred = model.predict(dataset_train).flatten()\n",
    "pred_val = model.predict(dataset_val).flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 334
    },
    "id": "-zt0cYfzllLW",
    "outputId": "86d65cf7-6036-498d-fb4f-ec897bd09320"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "start = 0\n",
    "step = 50\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.grid('on')\n",
    "plt.plot(pred_val[future + start: future + start + step], \n",
    "         label='Прогноз')\n",
    "plt.plot(y_val.flatten()[start: start+step], \n",
    "         label='Базовый ряд')\n",
    "plt.xlabel('Время')\n",
    "plt.ylabel('Значение ')\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 334
    },
    "id": "aEqy8GdQ8ZSq",
    "outputId": "6934f3a1-ad4a-41d5-f5f8-9aa8e660d602"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "start = 0\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.grid('on')\n",
    "plt.plot(pred[future + start: future + train_size], \n",
    "         label='Прогноз')\n",
    "plt.plot(y_train.flatten()[start: train_size], \n",
    "         label='Базовый ряд')\n",
    "plt.xlabel('Время')\n",
    "plt.ylabel('Значение')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QzIyXj4sA5I1"
   },
   "source": [
    "### Генерация текста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mS8eVmgRGbK5"
   },
   "source": [
    "#### Cонеты Шекспира"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jQLdsphKGkPj",
    "outputId": "2583f406-8eb0-46ec-d02d-d6aa7912eeb9"
   },
   "outputs": [],
   "source": [
    "#!wget https://storage.googleapis.com/laurencemoroney-blog.appspot.com/sonnets.txt -O sonnets.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eEFXxlcaGoNO",
    "outputId": "21725ae0-9a04-42e7-abd8-f1bfc0f576f0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['\\tsonnets',\n",
       " '',\n",
       " '',\n",
       " '',\n",
       " 'to the only begetter of',\n",
       " 'these insuing sonnets',\n",
       " 'mr. w. h. all happiness',\n",
       " 'and that eternity',\n",
       " 'promised by',\n",
       " 'our ever-living poet wisheth']"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Читаем текст\n",
    "data = open('sonnets.txt').read()\n",
    "corpus = data.lower().split(\"\\n\")\n",
    "corpus[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "id": "NcpcXWWWGeg-"
   },
   "outputs": [],
   "source": [
    "from keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "\n",
    "\n",
    "# Создаем объект для токенизации\n",
    "total_words = 1000\n",
    "tokenizer = Tokenizer(num_words=total_words)\n",
    "tokenizer.fit_on_texts(corpus)\n",
    "\n",
    "# tokenizer.index_word"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "kvj2zIe-jF2D"
   },
   "source": [
    "Исполним токенизацию и кодирование"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "03d474JpHaDF",
    "outputId": "4a58ef6d-dcc0-4475-8f99-68013cc5c37b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tsonnets\n",
      "[[878]]\n",
      "34 418\n"
     ]
    }
   ],
   "source": [
    "print(corpus[0])\n",
    "print(tokenizer.texts_to_sequences([corpus[0]]))\n",
    "print(tokenizer.word_index['from'], tokenizer.word_index['fairest'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MFZYgPT5IIk1",
    "outputId": "11e9d867-2fa3-435c-ae97-eb60567013c3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[3, 2],\n",
       " [3, 2, 313],\n",
       " [3, 2, 313, 4],\n",
       " [118, 878],\n",
       " [1, 8],\n",
       " [1, 8, 517],\n",
       " [126, 186],\n",
       " [126, 186, 278],\n",
       " [126, 186, 278, 635],\n",
       " [2, 98]]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# создадим последовательность токенов\n",
    "input_sequences = []\n",
    "for line in corpus:\n",
    "\ttoken_list = tokenizer.texts_to_sequences([line])[0]\n",
    "\tfor i in range(1, len(token_list)):\n",
    "\t\tsequence = token_list[:i+1]\n",
    "\t\tinput_sequences.append(sequence)\n",
    "input_sequences[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DwerIGL3IlEl",
    "outputId": "85dee48e-6ffa-4480-bdd3-33f70ae0a355"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   2],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   3,   2, 313],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   3,   2, 313,   4],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 118, 878],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   8],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   1,   8, 517],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   0, 126, 186],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0, 126, 186, 278],\n",
       "       [  0,   0,   0,   0,   0,   0,   0, 126, 186, 278, 635],\n",
       "       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   2,  98]],\n",
       "      dtype=int32)"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pad sequences \n",
    "max_sequence_len = max([len(x) for x in input_sequences])\n",
    "print(max_sequence_len)\n",
    "input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))\n",
    "input_sequences[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PRnDnCW-Z7qv",
    "outputId": "25dd7830-9df6-456d-e780-5645583271da"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12887, 1000)"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors, label = input_sequences[:,:-1], input_sequences[:,-1]\n",
    "\n",
    "label = to_categorical(label, num_classes=total_words)\n",
    "label.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "fyWwtXSlyeCL",
    "outputId": "d57ae3f2-8f3c-4147-f4a2-b9c9db67eb3f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 3], dtype=int32), 2)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictors[0], np.argmax(label[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0ZMOORKCjpUU"
   },
   "source": [
    "Создаем сеть"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "w9vH8Y59ajYL",
    "outputId": "0a1f5d57-3d02-46a0-96cf-4448b1681c46"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_6\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding_2 (Embedding)     (None, 10, 512)           512000    \n",
      "                                                                 \n",
      " bidirectional (Bidirectiona  (None, 10, 512)          1574912   \n",
      " l)                                                              \n",
      "                                                                 \n",
      " bidirectional_1 (Bidirectio  (None, 10, 1024)         4198400   \n",
      " nal)                                                            \n",
      "                                                                 \n",
      " lstm_7 (LSTM)               (None, 1024)              8392704   \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 1024)              0         \n",
      "                                                                 \n",
      " dense_8 (Dense)             (None, 2000)              2050000   \n",
      "                                                                 \n",
      " dense_9 (Dense)             (None, 1000)              2001000   \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 18,729,016\n",
      "Trainable params: 18,729,016\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.layers import Dropout, Bidirectional\n",
    "from keras import regularizers\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "\n",
    "early_stop = EarlyStopping(monitor='val_loss', patience=10)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Embedding(input_dim=total_words,\n",
    "                    output_dim=512,\n",
    "                    input_length=max_sequence_len-1))\n",
    "\n",
    "model.add(Bidirectional(LSTM(256, return_sequences=True)))\n",
    "model.add(Bidirectional(LSTM(512, return_sequences=True)))\n",
    "model.add(LSTM(1024))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(total_words * 2 , activation='relu'))\n",
    "model.add(Dense(total_words, activation='softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer=Adam(0.001),\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "AIg2f1HBxqof",
    "outputId": "e6cc1431-2a2a-491c-bea2-a1d27f220535"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "323/323 [==============================] - 226s 699ms/step - loss: 5.5899 - accuracy: 0.0325 - val_loss: 5.9864 - val_accuracy: 0.0318\n",
      "Epoch 2/10\n",
      "323/323 [==============================] - 194s 600ms/step - loss: 5.6328 - accuracy: 0.0402 - val_loss: 5.9211 - val_accuracy: 0.0310\n",
      "Epoch 3/10\n",
      "323/323 [==============================] - 203s 630ms/step - loss: 5.7110 - accuracy: 0.0443 - val_loss: 5.9501 - val_accuracy: 0.0314\n",
      "Epoch 4/10\n",
      "323/323 [==============================] - 213s 660ms/step - loss: 5.4408 - accuracy: 0.0478 - val_loss: 5.9464 - val_accuracy: 0.0419\n",
      "Epoch 5/10\n",
      "323/323 [==============================] - 208s 646ms/step - loss: 5.3222 - accuracy: 0.0543 - val_loss: 6.1081 - val_accuracy: 0.0434\n",
      "Epoch 6/10\n",
      "323/323 [==============================] - 182s 564ms/step - loss: 5.2035 - accuracy: 0.0621 - val_loss: 6.0522 - val_accuracy: 0.0485\n",
      "Epoch 7/10\n",
      "323/323 [==============================] - 233s 720ms/step - loss: 5.0795 - accuracy: 0.0662 - val_loss: 6.1953 - val_accuracy: 0.0504\n",
      "Epoch 8/10\n",
      "323/323 [==============================] - 190s 590ms/step - loss: 4.9380 - accuracy: 0.0748 - val_loss: 6.4132 - val_accuracy: 0.0539\n",
      "Epoch 9/10\n",
      "323/323 [==============================] - 259s 800ms/step - loss: 4.7825 - accuracy: 0.0853 - val_loss: 6.5990 - val_accuracy: 0.0543\n",
      "Epoch 10/10\n",
      "323/323 [==============================] - 250s 775ms/step - loss: 4.6062 - accuracy: 0.0918 - val_loss: 6.6977 - val_accuracy: 0.0543\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(predictors, label,\n",
    "                    epochs=100,\n",
    "                    validation_split=0.2,\n",
    "                    callbacks=[early_stop],\n",
    "                    verbose=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qdhjEfBElNMC"
   },
   "source": [
    "Тест\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 545
    },
    "id": "1fXTEO3GJ282",
    "outputId": "668929af-037c-4600-ed6b-c72618b7a894"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc = history.history['accuracy']\n",
    "acc_v = history.history['val_accuracy']\n",
    "loss = history.history['loss']\n",
    "loss_v = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, label='Train')\n",
    "plt.plot(epochs, acc_v, label='Test')\n",
    "plt.legend()\n",
    "plt.title('accuracy')\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, label='Train')\n",
    "plt.plot(epochs, loss_v, label='Test')\n",
    "plt.title('loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RxYwdExpNgLW"
   },
   "source": [
    "Строим тест генератора"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6Vc6PHgxa6Hm",
    "outputId": "e4f7f38e-f61f-4f61-ed95-33ebdcb86284"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[592, 18, 5, 313, 395]\n",
      "[592, 18, 5, 313, 395, 4]\n",
      "[592, 18, 5, 313, 395, 4, 48]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48, 4]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48, 4, 18]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48, 4, 18, 3]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48, 4, 18, 3, 7]\n",
      "[592, 18, 5, 313, 395, 4, 48, 103, 48, 4, 18, 3, 7, 7]\n",
      "Help me Obi Wan Kenobi, you're my only hope of time might time of me to in in me\n"
     ]
    }
   ],
   "source": [
    "seed_text = \"Help me Obi Wan Kenobi, you're my only hope\"\n",
    "# seed_text = \"She is my girl, I see in my hend\"\n",
    "next_words = 10\n",
    "  \n",
    "for _ in range(next_words):\n",
    "    token_list = tokenizer.texts_to_sequences([seed_text])[0]\n",
    "    print(token_list)\n",
    "    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')\n",
    "    predicted_proba = model.predict(token_list, verbose=0)\n",
    "    predicted_classes = np.argmax(predicted_proba, axis=1)\n",
    "\n",
    "    output_word = tokenizer.index_word[predicted_classes[0]]\n",
    "    seed_text += \" \" + output_word\n",
    "    \n",
    "print(seed_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "y-39KR00WhSR",
    "outputId": "353955d1-d968-4d41-a345-de6f675af5fb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.48813336e-07, 1.45019852e-02, 1.94872115e-02, 1.99348386e-03,\n",
       "        1.68418009e-02, 4.14440483e-02, 1.15137768e-03, 4.87218611e-03,\n",
       "        1.06497072e-02, 5.70536293e-02, 5.32634585e-05, 1.97127508e-03,\n",
       "        2.36631240e-04, 1.23594666e-03, 1.17745996e-03, 2.02843416e-02,\n",
       "        5.95748774e-04, 1.45421689e-02, 9.80085582e-02, 5.11876605e-02,\n",
       "        3.16196325e-04, 2.24535982e-03, 4.52190325e-05, 2.66880989e-02,\n",
       "        4.59551774e-02, 1.12146046e-02, 4.09604376e-03, 5.66328410e-04,\n",
       "        1.80001799e-02, 4.60798200e-03, 1.21964891e-04, 1.00624589e-02,\n",
       "        1.54109788e-03, 2.43620801e-04, 1.51233558e-04, 3.51943563e-05,\n",
       "        4.95611830e-03, 4.95147970e-06, 5.74829642e-07, 2.87542061e-04,\n",
       "        4.98339441e-03, 1.34530186e-03, 4.61745276e-06, 2.38688034e-03,\n",
       "        9.55008250e-03, 3.26174125e-03, 4.28118889e-04, 9.98815289e-04,\n",
       "        2.36361101e-02, 9.41978215e-06, 2.27953642e-04, 8.17902107e-03,\n",
       "        9.24917549e-05, 1.12853451e-02, 2.32661769e-04, 4.66785813e-03,\n",
       "        3.90121859e-04, 5.67818061e-04, 2.23076924e-07, 4.65759294e-05,\n",
       "        2.79570722e-05, 1.20084133e-06, 5.30375587e-03, 2.13133200e-04,\n",
       "        1.61938970e-05, 3.84131749e-03, 1.39800906e-02, 4.23367055e-06,\n",
       "        2.62839840e-05, 4.42434708e-03, 8.11861028e-05, 6.32739159e-07,\n",
       "        1.61902528e-04, 1.07112452e-02, 1.58471754e-03, 4.89988088e-05,\n",
       "        5.86602837e-04, 1.27188412e-06, 1.37939651e-05, 4.01624897e-03,\n",
       "        1.62269644e-05, 3.34261567e-04, 1.92657590e-03, 4.83013457e-03,\n",
       "        7.63611402e-03, 5.83631663e-06, 1.01356018e-04, 1.80163741e-04,\n",
       "        5.67631453e-08, 3.41399864e-04, 4.73090296e-08, 1.59613792e-05,\n",
       "        1.67429185e-04, 1.00659458e-02, 2.51030160e-05, 6.05277601e-04,\n",
       "        1.26223462e-02, 2.53789350e-02, 6.54651364e-03, 1.19143944e-04,\n",
       "        7.34153786e-04, 3.49280469e-07, 6.84350450e-03, 2.71000259e-04,\n",
       "        1.54972251e-04, 1.06512953e-05, 1.25873134e-06, 1.80766335e-08,\n",
       "        3.99667002e-08, 3.85818430e-06, 7.81873474e-04, 4.73513966e-03,\n",
       "        7.48865261e-07, 2.50054465e-04, 1.80009323e-07, 1.30122537e-02,\n",
       "        5.15236650e-07, 3.38026643e-04, 5.88999875e-03, 1.78532457e-04,\n",
       "        4.04065167e-06, 1.25080493e-04, 3.04184795e-07, 2.08736793e-03,\n",
       "        2.39280146e-03, 1.19535289e-04, 3.72981187e-03, 2.36762920e-03,\n",
       "        1.17308922e-07, 6.50498237e-07, 9.14573491e-07, 1.88813938e-05,\n",
       "        2.39089718e-06, 3.08343042e-05, 7.60790100e-03, 8.32698497e-05,\n",
       "        2.59601907e-03, 9.63295363e-08, 2.21235705e-08, 7.85687473e-04,\n",
       "        1.64786121e-04, 3.43863285e-05, 3.59678900e-08, 7.46253738e-03,\n",
       "        1.73858565e-03, 2.03021118e-05, 2.17537349e-03, 2.28070303e-06,\n",
       "        2.26719043e-04, 7.97998218e-04, 6.46427274e-04, 5.26653685e-06,\n",
       "        3.57032377e-06, 5.14530951e-09, 7.47342885e-04, 2.23528536e-06,\n",
       "        4.22191135e-07, 2.38135108e-04, 6.22125634e-04, 1.51541801e-02,\n",
       "        1.53145310e-03, 4.31154518e-07, 2.19897309e-04, 1.75557598e-05,\n",
       "        2.49713939e-03, 1.63495250e-04, 8.81304222e-05, 1.72212162e-06,\n",
       "        2.77948286e-03, 1.31446695e-05, 1.86721366e-02, 2.26871110e-02,\n",
       "        1.18677248e-03, 8.97738914e-07, 1.67745711e-05, 2.44847126e-03,\n",
       "        1.65608026e-06, 3.36827616e-05, 8.85941972e-06, 1.79409410e-03,\n",
       "        4.96526882e-05, 3.16912687e-04, 1.97206205e-03, 3.20650315e-08,\n",
       "        5.24633378e-03, 9.20509319e-06, 1.67391977e-06, 8.67955328e-04,\n",
       "        2.50996952e-03, 4.13676898e-05, 2.00450956e-03, 5.74678688e-06,\n",
       "        1.90075720e-04, 7.09966873e-04, 1.99862267e-03, 1.55381574e-08,\n",
       "        3.61626335e-05, 4.47079037e-05, 7.03039521e-04, 5.53672842e-04,\n",
       "        1.69951026e-03, 2.99581799e-08, 6.06574773e-08, 8.77936618e-05,\n",
       "        2.55997665e-03, 7.26053986e-05, 2.60416869e-07, 3.57321587e-05,\n",
       "        5.99381165e-04, 2.30443902e-07, 4.38716583e-04, 2.47062068e-04,\n",
       "        5.62374899e-03, 1.18672308e-08, 1.80475763e-06, 4.23928053e-04,\n",
       "        8.72128851e-07, 1.63054821e-04, 2.44002099e-08, 5.26228128e-03,\n",
       "        4.57885093e-04, 2.57382339e-06, 1.36992348e-05, 2.51783378e-04,\n",
       "        7.13190623e-03, 2.95963167e-04, 9.89301043e-05, 3.10876835e-08,\n",
       "        1.77633365e-06, 3.02000447e-09, 4.40370757e-03, 5.17814187e-05,\n",
       "        4.27845805e-07, 8.32156601e-08, 1.42039280e-04, 9.24082926e-08,\n",
       "        7.78251615e-06, 9.61310929e-04, 1.98047783e-04, 2.11554365e-07,\n",
       "        1.13105445e-04, 2.91457633e-04, 5.03233787e-06, 2.28448060e-09,\n",
       "        1.07100323e-06, 1.75628074e-07, 3.18599227e-08, 3.89184221e-03,\n",
       "        1.35606379e-08, 2.57908163e-04, 8.81980178e-09, 1.63653269e-07,\n",
       "        2.17888082e-04, 1.11975882e-04, 1.10751721e-07, 8.43260324e-08,\n",
       "        2.87788538e-07, 1.36398324e-08, 1.09868211e-06, 3.90109162e-05,\n",
       "        1.85910114e-08, 2.53610750e-08, 1.15646500e-07, 1.93145297e-06,\n",
       "        3.48120395e-08, 2.50787034e-05, 7.58759988e-09, 1.57856953e-03,\n",
       "        4.78014175e-04, 7.21687911e-07, 1.24016951e-04, 5.52644429e-04,\n",
       "        4.31533174e-08, 1.12553062e-04, 1.08565332e-03, 1.99238470e-09,\n",
       "        2.74458389e-09, 1.02906244e-08, 3.30334984e-07, 4.14948971e-07,\n",
       "        7.95198139e-03, 3.75738673e-05, 5.94661969e-07, 2.72186114e-08,\n",
       "        1.77412254e-08, 1.56387599e-04, 1.58272614e-05, 1.09366303e-08,\n",
       "        1.12149486e-07, 1.54904267e-08, 2.65370385e-04, 2.28842418e-03,\n",
       "        4.04063285e-05, 4.49212297e-04, 3.08646349e-07, 2.64707491e-08,\n",
       "        3.28566748e-05, 6.94283153e-05, 2.29170229e-08, 5.64059917e-07,\n",
       "        4.22798530e-06, 3.88742865e-06, 2.20258826e-05, 3.47919070e-07,\n",
       "        4.97555872e-03, 2.06104785e-04, 4.02857729e-08, 4.92056657e-04,\n",
       "        8.49871373e-09, 2.66226241e-08, 2.76947190e-04, 1.46055001e-07,\n",
       "        2.06127453e-08, 3.29253815e-08, 3.95691693e-08, 9.08954189e-06,\n",
       "        4.67628141e-08, 1.15098180e-06, 7.06992935e-08, 2.25945350e-05,\n",
       "        5.95938445e-08, 3.77035349e-07, 3.60152752e-09, 1.01488518e-09,\n",
       "        1.36323365e-07, 6.07989146e-04, 7.07234307e-08, 1.82451356e-06,\n",
       "        8.72316468e-06, 1.84769258e-02, 7.81657654e-05, 3.70467838e-04,\n",
       "        2.26021708e-08, 6.69217428e-08, 6.72546321e-08, 2.18405467e-06,\n",
       "        1.28327486e-06, 3.28488124e-04, 2.79424501e-08, 1.98345551e-05,\n",
       "        1.33805322e-08, 6.97755677e-05, 3.53679717e-08, 1.00889102e-08,\n",
       "        2.79652056e-07, 1.12355238e-07, 4.00629467e-08, 4.97052952e-07,\n",
       "        1.38588518e-07, 1.86012272e-08, 6.30165101e-04, 3.76419412e-05,\n",
       "        2.84432446e-07, 3.82650660e-06, 5.42897283e-07, 1.64118374e-09,\n",
       "        5.81731419e-09, 1.29661115e-04, 2.90526714e-06, 1.72657659e-03,\n",
       "        8.12003927e-05, 2.25197378e-04, 4.27191640e-04, 1.78223356e-08,\n",
       "        1.07811085e-08, 4.24664215e-08, 2.22701983e-05, 1.09905932e-06,\n",
       "        3.05811199e-08, 4.12977242e-05, 2.00153165e-03, 7.63805375e-08,\n",
       "        1.54745555e-06, 6.98942770e-08, 8.99772975e-04, 4.39831069e-07,\n",
       "        6.50274428e-03, 4.24235118e-08, 1.39190543e-05, 1.04654809e-07,\n",
       "        1.22969027e-03, 8.33626200e-06, 8.58324825e-08, 1.77815048e-06,\n",
       "        4.80140905e-08, 1.08203494e-05, 1.21530989e-04, 1.49789485e-04,\n",
       "        4.98706475e-03, 5.11252205e-04, 4.36385363e-07, 2.09779455e-06,\n",
       "        2.57250804e-06, 1.34156943e-08, 2.37985048e-04, 1.45193492e-03,\n",
       "        3.12132862e-08, 3.46286133e-09, 1.34266907e-06, 2.45596166e-08,\n",
       "        1.45313157e-08, 5.35768493e-07, 2.44408170e-07, 4.68557346e-07,\n",
       "        6.12620532e-09, 4.02376281e-05, 1.17510259e-04, 6.23910182e-06,\n",
       "        5.03170941e-06, 1.87171856e-09, 1.39821495e-04, 3.18384788e-04,\n",
       "        3.26199974e-08, 5.79410431e-09, 1.79330204e-08, 8.87332732e-08,\n",
       "        3.19580437e-07, 1.83764442e-07, 2.41071684e-05, 1.57991724e-06,\n",
       "        7.52416032e-04, 3.00760945e-08, 1.95071138e-07, 1.32274440e-08,\n",
       "        2.19505702e-04, 3.26171867e-04, 8.29526107e-04, 1.33994769e-03,\n",
       "        1.12151629e-05, 3.94002448e-08, 1.05873463e-04, 1.09920908e-08,\n",
       "        5.92362539e-06, 1.71719352e-04, 3.57772365e-06, 4.30973408e-08,\n",
       "        1.53355387e-07, 2.12427942e-04, 3.47727003e-09, 2.41106882e-05,\n",
       "        9.06647468e-09, 7.33014716e-08, 1.07644871e-06, 7.18150113e-04,\n",
       "        5.83181304e-07, 6.16586036e-08, 1.04446576e-06, 3.41036211e-04,\n",
       "        5.92143115e-05, 3.84973049e-08, 1.99638095e-07, 1.45753475e-07,\n",
       "        6.32299990e-09, 1.45757291e-08, 1.51211410e-07, 2.77576717e-08,\n",
       "        4.51564937e-08, 1.89459026e-08, 2.31201877e-03, 4.18544041e-05,\n",
       "        3.22476517e-08, 7.89435184e-10, 4.17715783e-05, 5.81402844e-03,\n",
       "        1.11538458e-08, 2.46955210e-07, 3.49971833e-06, 2.73639103e-04,\n",
       "        7.16445356e-05, 2.20162075e-08, 1.00836792e-06, 1.14666463e-07,\n",
       "        2.64197424e-05, 2.24987511e-03, 1.25185489e-08, 9.37148599e-08,\n",
       "        3.01507903e-08, 6.35894750e-08, 8.26449308e-04, 2.56879503e-07,\n",
       "        2.68372236e-09, 3.97059412e-05, 6.99506542e-09, 1.94179502e-05,\n",
       "        1.82898887e-08, 2.26932748e-08, 6.07696649e-09, 2.54707430e-07,\n",
       "        6.10090201e-09, 1.00625883e-07, 2.06405531e-07, 3.36800952e-08,\n",
       "        4.31399840e-08, 4.28534076e-06, 4.19459102e-05, 2.23462763e-07,\n",
       "        1.52420344e-05, 7.15012648e-05, 1.57668634e-09, 3.10468673e-09,\n",
       "        1.91399778e-07, 1.25550687e-05, 2.85980659e-05, 5.63731305e-07,\n",
       "        3.65707962e-08, 3.56421719e-04, 4.78501905e-09, 1.28514985e-08,\n",
       "        2.33204219e-06, 4.60534970e-08, 1.13743738e-07, 1.73715264e-09,\n",
       "        8.86728770e-08, 5.19146502e-04, 3.89411298e-07, 2.52463678e-07,\n",
       "        2.78487960e-07, 2.07305379e-06, 8.15324711e-06, 9.94062699e-09,\n",
       "        1.65345580e-06, 3.19863247e-08, 9.44457383e-08, 3.64255277e-03,\n",
       "        4.77062763e-08, 2.43684681e-08, 3.14680733e-07, 3.24729199e-09,\n",
       "        1.50619883e-07, 1.29763782e-08, 2.26874017e-05, 4.87274374e-05,\n",
       "        1.03708520e-03, 1.62145449e-03, 8.34605773e-04, 4.05664409e-08,\n",
       "        4.13701713e-08, 9.12246334e-10, 5.53694113e-09, 2.07007744e-09,\n",
       "        2.61226050e-05, 1.62259883e-09, 7.23982438e-08, 4.56846649e-09,\n",
       "        6.86604937e-04, 1.49428374e-07, 1.87208471e-07, 2.62357535e-05,\n",
       "        4.57850504e-08, 2.22288499e-08, 9.73734373e-08, 1.59888191e-03,\n",
       "        6.07261867e-08, 1.62948723e-04, 2.84113044e-09, 6.41450197e-06,\n",
       "        1.46832856e-04, 5.92515903e-07, 1.39882104e-07, 3.94883537e-04,\n",
       "        1.10429831e-07, 1.62333578e-07, 1.68278234e-06, 3.85120309e-08,\n",
       "        6.45137243e-06, 1.47731356e-08, 2.60630930e-08, 8.15318746e-09,\n",
       "        2.95359605e-05, 2.10177120e-08, 1.29032500e-08, 2.36359811e-05,\n",
       "        1.35441013e-07, 1.42013135e-07, 1.36812567e-04, 2.59813860e-05,\n",
       "        4.22573709e-09, 2.97079441e-05, 1.56403615e-07, 1.82964666e-08,\n",
       "        1.85106855e-05, 2.27423254e-08, 1.25597580e-06, 6.77911283e-09,\n",
       "        3.47201990e-06, 2.24052554e-09, 1.76342709e-07, 1.56618996e-09,\n",
       "        2.64881510e-06, 6.78920316e-08, 7.86601740e-04, 1.09529289e-07,\n",
       "        1.12206333e-08, 2.44024704e-06, 2.08820959e-04, 8.39915941e-08,\n",
       "        1.12400826e-08, 4.23265692e-06, 3.48200082e-08, 3.69302300e-09,\n",
       "        1.10577136e-09, 2.07529794e-07, 2.85685542e-06, 8.85049189e-08,\n",
       "        1.54761484e-08, 1.83368647e-05, 1.16208298e-06, 2.84742424e-03,\n",
       "        4.68110466e-06, 9.22190229e-05, 2.90078492e-06, 1.27008834e-05,\n",
       "        7.61356088e-04, 5.50918333e-09, 4.32814318e-09, 7.31688345e-08,\n",
       "        2.83893566e-08, 5.26648422e-04, 1.84160491e-08, 8.78448176e-08,\n",
       "        5.12340397e-04, 2.41050311e-05, 1.69767964e-06, 3.05650542e-06,\n",
       "        6.33674873e-08, 6.38005870e-09, 1.20046444e-08, 3.91227761e-09,\n",
       "        1.62154628e-08, 3.19540057e-08, 6.77808885e-08, 3.66067034e-08,\n",
       "        2.12606508e-04, 3.12039873e-07, 2.96218275e-07, 2.53290970e-08,\n",
       "        7.22959248e-06, 2.08636202e-08, 1.27581945e-09, 7.56596563e-09,\n",
       "        3.63553431e-06, 6.93272455e-07, 2.04766675e-05, 3.97262937e-07,\n",
       "        1.11673435e-04, 5.06127984e-09, 2.69347112e-07, 1.19211791e-06,\n",
       "        4.18436059e-07, 2.09054488e-04, 5.87693538e-09, 1.02624392e-06,\n",
       "        1.11684288e-08, 1.94213189e-05, 1.23505632e-08, 5.04648590e-08,\n",
       "        9.52015000e-07, 2.94803991e-04, 3.95539281e-08, 1.70459145e-07,\n",
       "        1.40439766e-07, 1.52282524e-08, 1.52385678e-06, 4.85843756e-08,\n",
       "        1.13405196e-08, 7.42090779e-05, 6.27667784e-09, 3.00010683e-08,\n",
       "        2.79317447e-03, 4.14072510e-09, 4.41418670e-05, 3.10834736e-08,\n",
       "        3.68101524e-07, 2.45561154e-07, 3.67143507e-08, 3.08070885e-04,\n",
       "        3.24076908e-08, 6.56950520e-04, 2.13555586e-06, 1.22175305e-04,\n",
       "        6.15840964e-03, 8.67495692e-06, 1.21691974e-05, 4.93345986e-08,\n",
       "        4.88048215e-08, 4.33256673e-07, 3.95506650e-09, 1.55195278e-06,\n",
       "        6.42635856e-09, 3.05371856e-07, 2.97183989e-09, 6.62533450e-09,\n",
       "        1.04355672e-06, 1.41824441e-09, 7.95635242e-06, 8.79323750e-07,\n",
       "        6.44247048e-05, 1.57473579e-07, 5.35321287e-10, 1.12774444e-07,\n",
       "        1.29217151e-05, 5.42491989e-07, 9.53409298e-08, 2.88474240e-08,\n",
       "        4.24676819e-06, 3.94482802e-09, 2.13671871e-08, 3.56997631e-08,\n",
       "        4.14599926e-05, 4.98397242e-07, 3.22883807e-07, 3.12888687e-06,\n",
       "        2.36873787e-09, 4.85579754e-08, 6.99516249e-08, 1.93694234e-08,\n",
       "        3.28229294e-06, 1.50281412e-05, 4.82658802e-09, 1.12660707e-07,\n",
       "        2.85591000e-08, 3.28830865e-05, 3.83753509e-08, 2.39319888e-06,\n",
       "        6.00576939e-08, 1.07034133e-08, 2.05062500e-09, 6.90346440e-07,\n",
       "        1.30892825e-08, 1.68452594e-08, 5.25109689e-09, 3.43577121e-05,\n",
       "        2.51414691e-04, 3.83056293e-04, 6.05796686e-06, 1.19127293e-07,\n",
       "        4.56352041e-07, 2.61871959e-04, 1.30002098e-08, 2.36687390e-03,\n",
       "        9.94578553e-09, 1.17559786e-07, 3.76035302e-07, 1.52237757e-04,\n",
       "        8.99032671e-09, 9.83486075e-08, 1.68972133e-06, 1.48584058e-06,\n",
       "        2.52024535e-08, 2.63638449e-05, 1.76017114e-03, 1.50793872e-04,\n",
       "        5.21997841e-08, 1.63730451e-08, 4.68054218e-08, 4.15140562e-07,\n",
       "        6.63013225e-07, 1.19383592e-04, 1.29651525e-07, 7.82654155e-04,\n",
       "        3.55409895e-04, 4.66723655e-08, 1.59990421e-08, 1.20878949e-05,\n",
       "        2.90685100e-03, 1.26023042e-06, 2.72345442e-05, 2.01304911e-08,\n",
       "        7.03183645e-08, 6.25136163e-05, 1.20933313e-04, 1.62481484e-07,\n",
       "        4.21895083e-06, 7.45681117e-09, 6.84881059e-08, 2.27309528e-07,\n",
       "        8.29824742e-09, 1.25245447e-03, 4.93253527e-09, 2.04219816e-07,\n",
       "        1.79777295e-08, 4.80466610e-04, 1.67018584e-07, 6.70598092e-06,\n",
       "        4.01769995e-08, 2.35598776e-08, 1.02104302e-07, 1.08039577e-08,\n",
       "        5.62322657e-06, 1.67734811e-07, 1.81494869e-07, 1.81116138e-06,\n",
       "        1.72997011e-06, 3.14509840e-08, 1.17165184e-08, 1.30542234e-04,\n",
       "        2.91361424e-09, 1.59678244e-08, 4.65530348e-07, 2.34400233e-08,\n",
       "        5.41722436e-08, 1.82065296e-08, 1.05289568e-03, 1.56733848e-04,\n",
       "        2.75595013e-08, 4.82868998e-08, 8.18932548e-08, 1.96993074e-06,\n",
       "        6.76006762e-09, 2.78991820e-06, 8.35178980e-07, 9.03236378e-06,\n",
       "        8.41286848e-04, 1.35500581e-04, 2.16450502e-08, 3.18936948e-08,\n",
       "        4.25361169e-09, 3.31744587e-09, 9.58389428e-05, 2.49279424e-08,\n",
       "        1.76982425e-07, 5.97348171e-09, 2.25387584e-08, 5.85638045e-05,\n",
       "        4.07932987e-07, 1.78846691e-04, 1.05021297e-06, 2.63642840e-04,\n",
       "        1.01989917e-06, 9.83871118e-09, 2.88118372e-07, 1.82329938e-08,\n",
       "        9.96574290e-09, 1.21124955e-07, 3.86391896e-09, 4.90959384e-04,\n",
       "        1.12089282e-07, 3.59644758e-09, 9.06115289e-08, 8.44411170e-06,\n",
       "        2.32948576e-08, 4.33265939e-08, 4.15182143e-07, 8.23836643e-09,\n",
       "        5.61463658e-08, 3.40013528e-09, 1.01629121e-04, 3.45805506e-06,\n",
       "        1.54235535e-09, 1.24645840e-08, 1.91479003e-07, 3.57046837e-09,\n",
       "        6.75854661e-09, 1.27781299e-04, 2.86286390e-08, 2.45422438e-08,\n",
       "        6.96092695e-09, 1.43139245e-04, 5.29736724e-07, 1.49574504e-07,\n",
       "        3.58096308e-08, 9.32936004e-08, 1.22052097e-06, 1.69720607e-07,\n",
       "        9.51401020e-08, 1.05635241e-04, 9.35689748e-09, 1.83329277e-07,\n",
       "        4.29886455e-08, 1.82783040e-07, 2.00770302e-07, 2.96434450e-07,\n",
       "        3.88622567e-07, 3.14941332e-07, 1.63443644e-07, 2.03834944e-07,\n",
       "        3.33639377e-07, 3.15725003e-07, 9.27908950e-09, 6.25146512e-08,\n",
       "        1.27520696e-08, 8.32941566e-07, 5.18532861e-09, 2.39981091e-04,\n",
       "        1.44028256e-08, 2.63481456e-06, 2.33969089e-07, 7.58723750e-09,\n",
       "        4.52010482e-08, 1.20081021e-08, 7.21564390e-08, 1.24057464e-04,\n",
       "        5.94403415e-09, 1.40330462e-06, 7.37652144e-08, 1.54067947e-09,\n",
       "        1.03757179e-06, 3.09248849e-09, 7.61760873e-07, 3.20183108e-06,\n",
       "        6.68540633e-06, 1.58367648e-08, 4.99475448e-07, 7.48192542e-05,\n",
       "        8.33097999e-07, 1.16065078e-08, 2.40623462e-03, 5.01326849e-06,\n",
       "        1.78553639e-09, 5.51977442e-09, 2.31569519e-08, 5.43503382e-04,\n",
       "        7.75644526e-09, 6.73290046e-08, 2.91326572e-08, 2.55170977e-04,\n",
       "        3.40377539e-07, 2.34425386e-07, 6.25562251e-08, 7.99831223e-09,\n",
       "        5.48133201e-08, 1.70515563e-07, 9.76483250e-08, 3.19972173e-08,\n",
       "        5.42219204e-04, 1.88945236e-07, 3.35594450e-08, 1.91439753e-07,\n",
       "        3.05212424e-08, 8.08874674e-08, 1.49503052e-07, 4.60872833e-08,\n",
       "        5.26537836e-09, 9.55592113e-05, 8.34510239e-09, 4.07399767e-08,\n",
       "        2.74252621e-08, 4.39497505e-08, 8.27147119e-07, 3.73126710e-07,\n",
       "        8.98958952e-09, 2.87387302e-05, 2.63859121e-08, 6.10052941e-09,\n",
       "        4.03161380e-08, 2.23605472e-08, 7.99380899e-08, 1.34780266e-05,\n",
       "        2.61869548e-09, 1.10007764e-03, 2.79924478e-07, 1.15563367e-07,\n",
       "        8.41971826e-09, 1.10548584e-07, 4.73400360e-06, 2.33933495e-08,\n",
       "        1.62592695e-08, 5.25098471e-08, 6.18707716e-08, 1.57339244e-07,\n",
       "        8.94486802e-05, 1.87768201e-08, 6.38957999e-06, 2.36172202e-08,\n",
       "        1.51813442e-08, 4.96389803e-05, 1.44454422e-08, 1.14855197e-06,\n",
       "        9.72050316e-08, 1.99739674e-08, 1.19913727e-06, 2.83820904e-04,\n",
       "        2.40745539e-08, 1.02829780e-07, 4.77581270e-05, 1.44453935e-07,\n",
       "        4.01419953e-10, 3.46558360e-09, 2.27029080e-08, 1.60223820e-07,\n",
       "        7.14808035e-09, 1.23527775e-08, 1.35055370e-05, 7.50657136e-09,\n",
       "        3.78919296e-08, 4.44065540e-09, 5.20958956e-08, 5.65722416e-07,\n",
       "        6.74420517e-06, 1.28572031e-09, 3.26545319e-07, 5.02667774e-08,\n",
       "        8.51900477e-05, 4.03381591e-07, 2.89045392e-08, 8.40614812e-05,\n",
       "        4.90762250e-06, 3.03868442e-09, 2.04308847e-07, 1.98110010e-05]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_proba"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zjQWWYJpTEPy"
   },
   "source": [
    "## Домашнее задание\n",
    "1. Попробуйте обучить нейронную сеть RNN/LSTM/GRU на любом другом датасете (любимый временной ряд, текст на русском (другом языке) как генератор или классификатор, или прилагаемый набор airline-passengers - пасажиропоток для авиалиний). \n",
    "\n",
    "2. Опишите, какой результат вы получили? Что помогло вам улучшить ее точность?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wdG-ZbOpXa1S"
   },
   "source": [
    "https://drive.google.com/file/d/1xwXieDVy1RKdfiJ6am_nNWp6XhAYdhNb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QrDLoqaYTSRi",
    "outputId": "cbb11f2a-ab5b-4c16-a5e5-f7022f2bf29d"
   },
   "outputs": [],
   "source": [
    "!wget 'https://drive.google.com/uc?export=download&id=1xwXieDVy1RKdfiJ6am_nNWp6XhAYdhNb' -O airline-passengers.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "7Ao45XmO90II",
    "outputId": "9db870e1-bfe1-4157-d0c6-88386bf87343"
   },
   "outputs": [],
   "source": [
    "pd.read_csv('/content/airline-passengers.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0G9qw7eUTEP0"
   },
   "source": [
    "## Дополнительные материалы\n",
    "\n",
    "1. [Оригинальная научная статья по LSTM](https://www.bioinf.jku.at/publications/older/2604.pdf)\n",
    "2. [Оригинальная научная статья по GRU](https://arxiv.org/abs/1406.1078)\n",
    "3. [Введение в RNN Рекуррентные Нейронные Сети для начинающих](https://python-scripts.com/recurrent-neural-network)\n",
    "4. [Введение в RNN](https://youtu.be/EBP3pqPeN8I)\n",
    "5. [Simple LSTM](https://nicodjimenez.github.io/2014/08/08/lstm.html)\n",
    "6. [Understanding LSTM Networks](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)\n",
    "7. [Illustrated Guide to LSTM's and GRU's: A step by step explanation](https://youtu.be/8HyCNIVRbSU)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EPk_b3MqTEP2"
   },
   "source": [
    "## Используемая литература \n",
    "\n",
    "Для подготовки данного методического пособия были использованы следующие ресурсы:\n",
    "<ol>\n",
    "    <li>https://www.kaggle.com/thebrownviking20/intro-to-recurrent-neural-networks-lstm-gru</li>\n",
    "    <li>Шакла Н. — Машинное обучение и TensorFlow 2019</li>\n",
    "    <li>Николенко, Кадурин, Архангельская: Глубокое обучение. Погружение в мир нейронных сетей 2018</li>\n",
    "    <li>Aurélien Géron - Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems 2019</li>\n",
    "    <li>https://towardsdatascience.com/illustrated-guide-to-lstms-and-gru-s-a-step-by-step-explanation-44e9eb85bf21</li>\n",
    "    <li>https://github.com/llSourcell/recurrent_neural_net_demo</li>\n",
    "    \n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dhprYcolWfMp"
   },
   "source": [
    "## Определения\n",
    "\n",
    "**Рекуррентные нейронные сети (Recurrent neural network, RNN)** — вид нейронных сетей, где связи между элементами образуют направленную последовательность. Благодаря этому появляется возможность обрабатывать серии событий во времени или последовательные пространственные цепочки.\n",
    "\n",
    "**Долгая краткосрочная память (Long short-term memory, LSTM)** — разновидность архитектуры рекуррентных нейронных сетей, предложенная в 1997 году Зеппом Хохрайтером и Юргеном Шмидхубером. В отличие от традиционных рекуррентных нейронных сетей, LSTM-сеть хорошо приспособлена к обучению на задачах классификации, обработки и прогнозирования временных рядов в случаях, когда важные события разделены временными лагами с неопределённой продолжительностью и границами.\n",
    "\n",
    "**Управляемые рекуррентные блоки (Gated Recurrent Units, GRU)** — механизм gate'ов для рекуррентных нейронных сетей, представленный в 2014 году. Было установлено, что его эффективность при решении задач моделирования музыкальных и речевых сигналов сопоставима с использованием долгой краткосрочной памяти (LSTM). По сравнению с LSTM у данного механизма меньше параметров, т.к. отсутствует выходной gate.\n",
    "\n",
    "**RNN, LSTM, GRU**\n",
    "<img src='https://www.mdpi.com/energies/energies-13-00147/article_deploy/html/images/energies-13-00147-g008.png'>\n",
    "\n",
    "\n",
    "**Механизм внимания (Attention)** — техника используемая в рекуррентных нейронных сетях (сокр. RNN) и сверточных нейронных сетях (сокр. CNN) для поиска взаимосвязей между различными частями входных и выходных данных.\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1a72Ake6Ai2SdkZ9cQpqmq6-ebjblcQ34' width=450>\n",
    "\n",
    "**Bidirectional LSTM**\n",
    "\n",
    "Двунаправленные рекуррентные нейронные сети (BRNN) соединяют два скрытых слоя противоположных направлений с одним и тем же выходом. При такой форме генеративного глубокого обучения выходной слой может получать информацию из прошлого (назад) и будущего (вперед) состояний одновременно.\n",
    "\n",
    "\n",
    "<img src='https://drive.google.com/uc?export=view&id=1kCGsUWhUjIoIAquvE7FjaAbYjAQdsyW7' width=550>"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}